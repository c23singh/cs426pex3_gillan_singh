/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleConstdec(AMultipleConstdec node);
    void CaseASingleConstdec(ASingleConstdec node);
    void CaseAMultipleFuncdec(AMultipleFuncdec node);
    void CaseASingleFuncdec(ASingleFuncdec node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAIfblockStatement(AIfblockStatement node);
    void CaseAWhileblockStatement(AWhileblockStatement node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseAConstantDeclaration(AConstantDeclaration node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseAAddExpression(AAddExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseASubtractExpression2(ASubtractExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAMultiplyExpression3(AMultiplyExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseADivideExpression4(ADivideExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAParenthesisExpression5(AParenthesisExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseANegativeExpression6(ANegativeExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAFltOperand(AFltOperand node);
    void CaseAStrOperand(AStrOperand node);
    void CaseAFunctionStatement(AFunctionStatement node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseADefineFunction(ADefineFunction node);
    void CaseASingleFuncparams(ASingleFuncparams node);
    void CaseAMultipleFuncparams(AMultipleFuncparams node);
    void CaseAEmptyFuncparams(AEmptyFuncparams node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAMainBlock(AMainBlock node);
    void CaseAGreqEquality(AGreqEquality node);
    void CaseAGreaterEquality(AGreaterEquality node);
    void CaseALeqEquality(ALeqEquality node);
    void CaseALessEquality(ALessEquality node);
    void CaseAEquivalenceEquality(AEquivalenceEquality node);
    void CaseAAndLogical(AAndLogical node);
    void CaseAPassLogical(APassLogical node);
    void CaseAOrLogical2(AOrLogical2 node);
    void CaseAPassLogical2(APassLogical2 node);
    void CaseANotLogical3(ANotLogical3 node);
    void CaseAPassLogical3(APassLogical3 node);
    void CaseACompareComparison(ACompareComparison node);
    void CaseANocompareComparison(ANocompareComparison node);

    void CaseTEol(TEol node);
    void CaseTGreatereq(TGreatereq node);
    void CaseTGreater(TGreater node);
    void CaseTLesseq(TLesseq node);
    void CaseTLess(TLess node);
    void CaseTEquiv(TEquiv node);
    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTMinus(TMinus node);
    void CaseTDivide(TDivide node);
    void CaseTOpenp(TOpenp node);
    void CaseTClosep(TClosep node);
    void CaseTAndl(TAndl node);
    void CaseTOrl(TOrl node);
    void CaseTNotl(TNotl node);
    void CaseTComma(TComma node);
    void CaseTKeymain(TKeymain node);
    void CaseTKeyfunc(TKeyfunc node);
    void CaseTId(TId node);
    void CaseTKeyfloat(TKeyfloat node);
    void CaseTKeyint(TKeyint node);
    void CaseTKeyif(TKeyif node);
    void CaseTKeyelse(TKeyelse node);
    void CaseTKeyconst(TKeyconst node);
    void CaseTKeystr(TKeystr node);
    void CaseTKeywhile(TKeywhile node);
    void CaseTComment(TComment node);
    void CaseTFloat(TFloat node);
    void CaseTInteger(TInteger node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleConstdec(ASingleConstdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleFuncdec(ASingleFuncdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfblockStatement(AIfblockStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression(AAddExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpression4(ADivideExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFltOperand(AFltOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStrOperand(AStrOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionStatement(AFunctionStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADefineFunction(ADefineFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleFuncparams(ASingleFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFuncparams(AMultipleFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainBlock(AMainBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreqEquality(AGreqEquality node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterEquality(AGreaterEquality node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeqEquality(ALeqEquality node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessEquality(ALessEquality node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEquivalenceEquality(AEquivalenceEquality node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndLogical(AAndLogical node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassLogical(APassLogical node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrLogical2(AOrLogical2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassLogical2(APassLogical2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotLogical3(ANotLogical3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassLogical3(APassLogical3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompareComparison(ACompareComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANocompareComparison(ANocompareComparison node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreatereq(TGreatereq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesseq(TLesseq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquiv(TEquiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenp(TOpenp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosep(TClosep node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAndl(TAndl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOrl(TOrl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotl(TNotl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeymain(TKeymain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyfunc(TKeyfunc node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyfloat(TKeyfloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyint(TKeyint node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyif(TKeyif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyelse(TKeyelse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyconst(TKeyconst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeystr(TKeystr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywhile(TKeywhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        if(node.GetMainBlock() != null)
        {
            node.GetMainBlock().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstdec(AMultipleConstdec node)
    {
        InAMultipleConstdec(node);
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        OutAMultipleConstdec(node);
    }
    public virtual void InASingleConstdec(ASingleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConstdec(ASingleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConstdec(ASingleConstdec node)
    {
        InASingleConstdec(node);
        OutASingleConstdec(node);
    }
    public virtual void InAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFuncdec(AMultipleFuncdec node)
    {
        InAMultipleFuncdec(node);
        if(node.GetDefineFunction() != null)
        {
            node.GetDefineFunction().Apply(this);
        }
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        OutAMultipleFuncdec(node);
    }
    public virtual void InASingleFuncdec(ASingleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFuncdec(ASingleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFuncdec(ASingleFuncdec node)
    {
        InASingleFuncdec(node);
        OutASingleFuncdec(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionStatement() != null)
        {
            node.GetFunctionStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfblockStatement(AIfblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfblockStatement(AIfblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfblockStatement(AIfblockStatement node)
    {
        InAIfblockStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfblockStatement(node);
    }
    public virtual void InAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileblockStatement(AWhileblockStatement node)
    {
        InAWhileblockStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileblockStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        InAConstantDeclaration(node);
        if(node.GetKeyconst() != null)
        {
            node.GetKeyconst().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAConstantDeclaration(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression2(ASubtractExpression2 node)
    {
        InASubtractExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutASubtractExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        InAMultiplyExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAMultiplyExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InADivideExpression4(ADivideExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression4(ADivideExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression4(ADivideExpression4 node)
    {
        InADivideExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutADivideExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression5(AParenthesisExpression5 node)
    {
        InAParenthesisExpression5(node);
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        OutAParenthesisExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        InANegativeExpression6(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANegativeExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAFltOperand(AFltOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFltOperand(AFltOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFltOperand(AFltOperand node)
    {
        InAFltOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFltOperand(node);
    }
    public virtual void InAStrOperand(AStrOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrOperand(AStrOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrOperand(AStrOperand node)
    {
        InAStrOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStrOperand(node);
    }
    public virtual void InAFunctionStatement(AFunctionStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionStatement(AFunctionStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionStatement(AFunctionStatement node)
    {
        InAFunctionStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionStatement(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InADefineFunction(ADefineFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefineFunction(ADefineFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADefineFunction(ADefineFunction node)
    {
        InADefineFunction(node);
        if(node.GetKeyfunc() != null)
        {
            node.GetKeyfunc().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetParamopen() != null)
        {
            node.GetParamopen().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetParamclose() != null)
        {
            node.GetParamclose().Apply(this);
        }
        if(node.GetFuncopen() != null)
        {
            node.GetFuncopen().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetFuncclose() != null)
        {
            node.GetFuncclose().Apply(this);
        }
        OutADefineFunction(node);
    }
    public virtual void InASingleFuncparams(ASingleFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFuncparams(ASingleFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFuncparams(ASingleFuncparams node)
    {
        InASingleFuncparams(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutASingleFuncparams(node);
    }
    public virtual void InAMultipleFuncparams(AMultipleFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFuncparams(AMultipleFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFuncparams(AMultipleFuncparams node)
    {
        InAMultipleFuncparams(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        OutAMultipleFuncparams(node);
    }
    public virtual void InAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyFuncparams(AEmptyFuncparams node)
    {
        InAEmptyFuncparams(node);
        OutAEmptyFuncparams(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetKeyif() != null)
        {
            node.GetKeyif().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetKeywhile() != null)
        {
            node.GetKeywhile().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAMainBlock(AMainBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainBlock(AMainBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainBlock(AMainBlock node)
    {
        InAMainBlock(node);
        if(node.GetKeymain() != null)
        {
            node.GetKeymain().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        OutAMainBlock(node);
    }
    public virtual void InAGreqEquality(AGreqEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreqEquality(AGreqEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreqEquality(AGreqEquality node)
    {
        InAGreqEquality(node);
        if(node.GetGreatereq() != null)
        {
            node.GetGreatereq().Apply(this);
        }
        OutAGreqEquality(node);
    }
    public virtual void InAGreaterEquality(AGreaterEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEquality(AGreaterEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEquality(AGreaterEquality node)
    {
        InAGreaterEquality(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterEquality(node);
    }
    public virtual void InALeqEquality(ALeqEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqEquality(ALeqEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqEquality(ALeqEquality node)
    {
        InALeqEquality(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALeqEquality(node);
    }
    public virtual void InALessEquality(ALessEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEquality(ALessEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEquality(ALessEquality node)
    {
        InALessEquality(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessEquality(node);
    }
    public virtual void InAEquivalenceEquality(AEquivalenceEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalenceEquality(AEquivalenceEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalenceEquality(AEquivalenceEquality node)
    {
        InAEquivalenceEquality(node);
        if(node.GetEquiv() != null)
        {
            node.GetEquiv().Apply(this);
        }
        OutAEquivalenceEquality(node);
    }
    public virtual void InAAndLogical(AAndLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndLogical(AAndLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndLogical(AAndLogical node)
    {
        InAAndLogical(node);
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetAndl() != null)
        {
            node.GetAndl().Apply(this);
        }
        if(node.GetLogical2() != null)
        {
            node.GetLogical2().Apply(this);
        }
        OutAAndLogical(node);
    }
    public virtual void InAPassLogical(APassLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassLogical(APassLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassLogical(APassLogical node)
    {
        InAPassLogical(node);
        if(node.GetLogical2() != null)
        {
            node.GetLogical2().Apply(this);
        }
        OutAPassLogical(node);
    }
    public virtual void InAOrLogical2(AOrLogical2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrLogical2(AOrLogical2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrLogical2(AOrLogical2 node)
    {
        InAOrLogical2(node);
        if(node.GetLogical2() != null)
        {
            node.GetLogical2().Apply(this);
        }
        if(node.GetOrl() != null)
        {
            node.GetOrl().Apply(this);
        }
        if(node.GetLogical3() != null)
        {
            node.GetLogical3().Apply(this);
        }
        OutAOrLogical2(node);
    }
    public virtual void InAPassLogical2(APassLogical2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassLogical2(APassLogical2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassLogical2(APassLogical2 node)
    {
        InAPassLogical2(node);
        if(node.GetLogical3() != null)
        {
            node.GetLogical3().Apply(this);
        }
        OutAPassLogical2(node);
    }
    public virtual void InANotLogical3(ANotLogical3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotLogical3(ANotLogical3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotLogical3(ANotLogical3 node)
    {
        InANotLogical3(node);
        if(node.GetNotl() != null)
        {
            node.GetNotl().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutANotLogical3(node);
    }
    public virtual void InAPassLogical3(APassLogical3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassLogical3(APassLogical3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassLogical3(APassLogical3 node)
    {
        InAPassLogical3(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutAPassLogical3(node);
    }
    public virtual void InACompareComparison(ACompareComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareComparison(ACompareComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareComparison(ACompareComparison node)
    {
        InACompareComparison(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetEquality() != null)
        {
            node.GetEquality().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutACompareComparison(node);
    }
    public virtual void InANocompareComparison(ANocompareComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutANocompareComparison(ANocompareComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseANocompareComparison(ANocompareComparison node)
    {
        InANocompareComparison(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutANocompareComparison(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainBlock() != null)
        {
            node.GetMainBlock().Apply(this);
        }
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstdec(AMultipleConstdec node)
    {
        InAMultipleConstdec(node);
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        OutAMultipleConstdec(node);
    }
    public virtual void InASingleConstdec(ASingleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConstdec(ASingleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConstdec(ASingleConstdec node)
    {
        InASingleConstdec(node);
        OutASingleConstdec(node);
    }
    public virtual void InAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFuncdec(AMultipleFuncdec node)
    {
        InAMultipleFuncdec(node);
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        if(node.GetDefineFunction() != null)
        {
            node.GetDefineFunction().Apply(this);
        }
        OutAMultipleFuncdec(node);
    }
    public virtual void InASingleFuncdec(ASingleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFuncdec(ASingleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFuncdec(ASingleFuncdec node)
    {
        InASingleFuncdec(node);
        OutASingleFuncdec(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionStatement() != null)
        {
            node.GetFunctionStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfblockStatement(AIfblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfblockStatement(AIfblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfblockStatement(AIfblockStatement node)
    {
        InAIfblockStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfblockStatement(node);
    }
    public virtual void InAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileblockStatement(AWhileblockStatement node)
    {
        InAWhileblockStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileblockStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        InAConstantDeclaration(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyconst() != null)
        {
            node.GetKeyconst().Apply(this);
        }
        OutAConstantDeclaration(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression2(ASubtractExpression2 node)
    {
        InASubtractExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutASubtractExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        InAMultiplyExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMultiplyExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InADivideExpression4(ADivideExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression4(ADivideExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression4(ADivideExpression4 node)
    {
        InADivideExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutADivideExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression5(AParenthesisExpression5 node)
    {
        InAParenthesisExpression5(node);
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        OutAParenthesisExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        InANegativeExpression6(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAFltOperand(AFltOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFltOperand(AFltOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFltOperand(AFltOperand node)
    {
        InAFltOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFltOperand(node);
    }
    public virtual void InAStrOperand(AStrOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrOperand(AStrOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrOperand(AStrOperand node)
    {
        InAStrOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStrOperand(node);
    }
    public virtual void InAFunctionStatement(AFunctionStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionStatement(AFunctionStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionStatement(AFunctionStatement node)
    {
        InAFunctionStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionStatement(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InADefineFunction(ADefineFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefineFunction(ADefineFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADefineFunction(ADefineFunction node)
    {
        InADefineFunction(node);
        if(node.GetFuncclose() != null)
        {
            node.GetFuncclose().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetFuncopen() != null)
        {
            node.GetFuncopen().Apply(this);
        }
        if(node.GetParamclose() != null)
        {
            node.GetParamclose().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetParamopen() != null)
        {
            node.GetParamopen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyfunc() != null)
        {
            node.GetKeyfunc().Apply(this);
        }
        OutADefineFunction(node);
    }
    public virtual void InASingleFuncparams(ASingleFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFuncparams(ASingleFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFuncparams(ASingleFuncparams node)
    {
        InASingleFuncparams(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutASingleFuncparams(node);
    }
    public virtual void InAMultipleFuncparams(AMultipleFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFuncparams(AMultipleFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFuncparams(AMultipleFuncparams node)
    {
        InAMultipleFuncparams(node);
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAMultipleFuncparams(node);
    }
    public virtual void InAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyFuncparams(AEmptyFuncparams node)
    {
        InAEmptyFuncparams(node);
        OutAEmptyFuncparams(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetKeyif() != null)
        {
            node.GetKeyif().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetKeywhile() != null)
        {
            node.GetKeywhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAMainBlock(AMainBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainBlock(AMainBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainBlock(AMainBlock node)
    {
        InAMainBlock(node);
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetKeymain() != null)
        {
            node.GetKeymain().Apply(this);
        }
        OutAMainBlock(node);
    }
    public virtual void InAGreqEquality(AGreqEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreqEquality(AGreqEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreqEquality(AGreqEquality node)
    {
        InAGreqEquality(node);
        if(node.GetGreatereq() != null)
        {
            node.GetGreatereq().Apply(this);
        }
        OutAGreqEquality(node);
    }
    public virtual void InAGreaterEquality(AGreaterEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEquality(AGreaterEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEquality(AGreaterEquality node)
    {
        InAGreaterEquality(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterEquality(node);
    }
    public virtual void InALeqEquality(ALeqEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqEquality(ALeqEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqEquality(ALeqEquality node)
    {
        InALeqEquality(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALeqEquality(node);
    }
    public virtual void InALessEquality(ALessEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEquality(ALessEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEquality(ALessEquality node)
    {
        InALessEquality(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessEquality(node);
    }
    public virtual void InAEquivalenceEquality(AEquivalenceEquality node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalenceEquality(AEquivalenceEquality node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalenceEquality(AEquivalenceEquality node)
    {
        InAEquivalenceEquality(node);
        if(node.GetEquiv() != null)
        {
            node.GetEquiv().Apply(this);
        }
        OutAEquivalenceEquality(node);
    }
    public virtual void InAAndLogical(AAndLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndLogical(AAndLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndLogical(AAndLogical node)
    {
        InAAndLogical(node);
        if(node.GetLogical2() != null)
        {
            node.GetLogical2().Apply(this);
        }
        if(node.GetAndl() != null)
        {
            node.GetAndl().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        OutAAndLogical(node);
    }
    public virtual void InAPassLogical(APassLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassLogical(APassLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassLogical(APassLogical node)
    {
        InAPassLogical(node);
        if(node.GetLogical2() != null)
        {
            node.GetLogical2().Apply(this);
        }
        OutAPassLogical(node);
    }
    public virtual void InAOrLogical2(AOrLogical2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrLogical2(AOrLogical2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrLogical2(AOrLogical2 node)
    {
        InAOrLogical2(node);
        if(node.GetLogical3() != null)
        {
            node.GetLogical3().Apply(this);
        }
        if(node.GetOrl() != null)
        {
            node.GetOrl().Apply(this);
        }
        if(node.GetLogical2() != null)
        {
            node.GetLogical2().Apply(this);
        }
        OutAOrLogical2(node);
    }
    public virtual void InAPassLogical2(APassLogical2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassLogical2(APassLogical2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassLogical2(APassLogical2 node)
    {
        InAPassLogical2(node);
        if(node.GetLogical3() != null)
        {
            node.GetLogical3().Apply(this);
        }
        OutAPassLogical2(node);
    }
    public virtual void InANotLogical3(ANotLogical3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotLogical3(ANotLogical3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotLogical3(ANotLogical3 node)
    {
        InANotLogical3(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetNotl() != null)
        {
            node.GetNotl().Apply(this);
        }
        OutANotLogical3(node);
    }
    public virtual void InAPassLogical3(APassLogical3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassLogical3(APassLogical3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassLogical3(APassLogical3 node)
    {
        InAPassLogical3(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutAPassLogical3(node);
    }
    public virtual void InACompareComparison(ACompareComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareComparison(ACompareComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareComparison(ACompareComparison node)
    {
        InACompareComparison(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetEquality() != null)
        {
            node.GetEquality().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutACompareComparison(node);
    }
    public virtual void InANocompareComparison(ANocompareComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutANocompareComparison(ANocompareComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseANocompareComparison(ANocompareComparison node)
    {
        InANocompareComparison(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutANocompareComparison(node);
    }
}
} // namespace CS426.analysis
