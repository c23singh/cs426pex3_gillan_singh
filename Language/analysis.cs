/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleConstdec(AMultipleConstdec node);
    void CaseASingleConstdec(ASingleConstdec node);
    void CaseAMultipleFuncdec(AMultipleFuncdec node);
    void CaseASingleFuncdec(ASingleFuncdec node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAIfblockStatement(AIfblockStatement node);
    void CaseAWhileblockStatement(AWhileblockStatement node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseAConstantDeclaration(AConstantDeclaration node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseAAddExpression(AAddExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseASubtractExpression2(ASubtractExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAMultiplyExpression3(AMultiplyExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseADivideExpression4(ADivideExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAParenthesisExpression5(AParenthesisExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseANegativeExpression6(ANegativeExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAFltOperand(AFltOperand node);
    void CaseAStrOperand(AStrOperand node);
    void CaseAFunctionStatement(AFunctionStatement node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseADefineFunction(ADefineFunction node);
    void CaseASingleintFuncparams(ASingleintFuncparams node);
    void CaseASinglefloatFuncparams(ASinglefloatFuncparams node);
    void CaseASinglestrFuncparams(ASinglestrFuncparams node);
    void CaseAMultintFuncparams(AMultintFuncparams node);
    void CaseAMultifloatFuncparams(AMultifloatFuncparams node);
    void CaseAMultistrFuncparams(AMultistrFuncparams node);
    void CaseAEmptyFuncparams(AEmptyFuncparams node);
    void CaseAIfStatement(AIfStatement node);
    void CaseASingleConditional(ASingleConditional node);
    void CaseAMultipleandConditional(AMultipleandConditional node);
    void CaseANegateNegation(ANegateNegation node);
    void CaseADontnegateNegation(ADontnegateNegation node);
    void CaseAVarBoolean(AVarBoolean node);
    void CaseAIntBoolean(AIntBoolean node);
    void CaseAAndConjunction(AAndConjunction node);
    void CaseAPassConjunction(APassConjunction node);
    void CaseAConjunction2(AConjunction2 node);
    void CaseACompareComparison(ACompareComparison node);
    void CaseABooleanintComparison(ABooleanintComparison node);
    void CaseABooleanvarComparison(ABooleanvarComparison node);
    void CaseAGreqOperation(AGreqOperation node);
    void CaseAGreaterOperation(AGreaterOperation node);
    void CaseALeqOperation(ALeqOperation node);
    void CaseALessOperation(ALessOperation node);
    void CaseAEquivalenceOperation(AEquivalenceOperation node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAMainBlock(AMainBlock node);

    void CaseTEol(TEol node);
    void CaseTGreatereq(TGreatereq node);
    void CaseTGreater(TGreater node);
    void CaseTLesseq(TLesseq node);
    void CaseTLess(TLess node);
    void CaseTEquiv(TEquiv node);
    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTMinus(TMinus node);
    void CaseTDivide(TDivide node);
    void CaseTOpenp(TOpenp node);
    void CaseTClosep(TClosep node);
    void CaseTAndl(TAndl node);
    void CaseTOrl(TOrl node);
    void CaseTNotl(TNotl node);
    void CaseTComma(TComma node);
    void CaseTKeyfloat(TKeyfloat node);
    void CaseTKeyint(TKeyint node);
    void CaseTKeyif(TKeyif node);
    void CaseTKeyelse(TKeyelse node);
    void CaseTKeyconst(TKeyconst node);
    void CaseTKeystr(TKeystr node);
    void CaseTKeyfunc(TKeyfunc node);
    void CaseTKeywhile(TKeywhile node);
    void CaseTKeymain(TKeymain node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTFloat(TFloat node);
    void CaseTInteger(TInteger node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleConstdec(ASingleConstdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleFuncdec(ASingleFuncdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfblockStatement(AIfblockStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression(AAddExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpression4(ADivideExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFltOperand(AFltOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStrOperand(AStrOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionStatement(AFunctionStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADefineFunction(ADefineFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleintFuncparams(ASingleintFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASinglestrFuncparams(ASinglestrFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultintFuncparams(AMultintFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultistrFuncparams(AMultistrFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleConditional(ASingleConditional node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleandConditional(AMultipleandConditional node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegateNegation(ANegateNegation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADontnegateNegation(ADontnegateNegation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarBoolean(AVarBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntBoolean(AIntBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndConjunction(AAndConjunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassConjunction(APassConjunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConjunction2(AConjunction2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompareComparison(ACompareComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanintComparison(ABooleanintComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooleanvarComparison(ABooleanvarComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreqOperation(AGreqOperation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterOperation(AGreaterOperation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeqOperation(ALeqOperation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessOperation(ALessOperation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEquivalenceOperation(AEquivalenceOperation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainBlock(AMainBlock node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreatereq(TGreatereq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesseq(TLesseq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquiv(TEquiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenp(TOpenp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClosep(TClosep node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAndl(TAndl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOrl(TOrl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotl(TNotl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyfloat(TKeyfloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyint(TKeyint node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyif(TKeyif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyelse(TKeyelse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyconst(TKeyconst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeystr(TKeystr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeyfunc(TKeyfunc node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywhile(TKeywhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeymain(TKeymain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        if(node.GetMainBlock() != null)
        {
            node.GetMainBlock().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstdec(AMultipleConstdec node)
    {
        InAMultipleConstdec(node);
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        OutAMultipleConstdec(node);
    }
    public virtual void InASingleConstdec(ASingleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConstdec(ASingleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConstdec(ASingleConstdec node)
    {
        InASingleConstdec(node);
        OutASingleConstdec(node);
    }
    public virtual void InAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFuncdec(AMultipleFuncdec node)
    {
        InAMultipleFuncdec(node);
        if(node.GetDefineFunction() != null)
        {
            node.GetDefineFunction().Apply(this);
        }
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        OutAMultipleFuncdec(node);
    }
    public virtual void InASingleFuncdec(ASingleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFuncdec(ASingleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFuncdec(ASingleFuncdec node)
    {
        InASingleFuncdec(node);
        OutASingleFuncdec(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionStatement() != null)
        {
            node.GetFunctionStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfblockStatement(AIfblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfblockStatement(AIfblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfblockStatement(AIfblockStatement node)
    {
        InAIfblockStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfblockStatement(node);
    }
    public virtual void InAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileblockStatement(AWhileblockStatement node)
    {
        InAWhileblockStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileblockStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        InAConstantDeclaration(node);
        if(node.GetKeyconst() != null)
        {
            node.GetKeyconst().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAConstantDeclaration(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression2(ASubtractExpression2 node)
    {
        InASubtractExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutASubtractExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        InAMultiplyExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAMultiplyExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InADivideExpression4(ADivideExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression4(ADivideExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression4(ADivideExpression4 node)
    {
        InADivideExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutADivideExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression5(AParenthesisExpression5 node)
    {
        InAParenthesisExpression5(node);
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        OutAParenthesisExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        InANegativeExpression6(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANegativeExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAFltOperand(AFltOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFltOperand(AFltOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFltOperand(AFltOperand node)
    {
        InAFltOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFltOperand(node);
    }
    public virtual void InAStrOperand(AStrOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrOperand(AStrOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrOperand(AStrOperand node)
    {
        InAStrOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStrOperand(node);
    }
    public virtual void InAFunctionStatement(AFunctionStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionStatement(AFunctionStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionStatement(AFunctionStatement node)
    {
        InAFunctionStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionStatement(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InADefineFunction(ADefineFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefineFunction(ADefineFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADefineFunction(ADefineFunction node)
    {
        InADefineFunction(node);
        if(node.GetKeyfunc() != null)
        {
            node.GetKeyfunc().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetParamopen() != null)
        {
            node.GetParamopen().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetParamclose() != null)
        {
            node.GetParamclose().Apply(this);
        }
        if(node.GetFuncopen() != null)
        {
            node.GetFuncopen().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetFuncclose() != null)
        {
            node.GetFuncclose().Apply(this);
        }
        OutADefineFunction(node);
    }
    public virtual void InASingleintFuncparams(ASingleintFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleintFuncparams(ASingleintFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleintFuncparams(ASingleintFuncparams node)
    {
        InASingleintFuncparams(node);
        if(node.GetKeyint() != null)
        {
            node.GetKeyint().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutASingleintFuncparams(node);
    }
    public virtual void InASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        InASinglefloatFuncparams(node);
        if(node.GetKeyfloat() != null)
        {
            node.GetKeyfloat().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutASinglefloatFuncparams(node);
    }
    public virtual void InASinglestrFuncparams(ASinglestrFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinglestrFuncparams(ASinglestrFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASinglestrFuncparams(ASinglestrFuncparams node)
    {
        InASinglestrFuncparams(node);
        if(node.GetKeystr() != null)
        {
            node.GetKeystr().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutASinglestrFuncparams(node);
    }
    public virtual void InAMultintFuncparams(AMultintFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultintFuncparams(AMultintFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultintFuncparams(AMultintFuncparams node)
    {
        InAMultintFuncparams(node);
        if(node.GetKeyint() != null)
        {
            node.GetKeyint().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        OutAMultintFuncparams(node);
    }
    public virtual void InAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        InAMultifloatFuncparams(node);
        if(node.GetKeyfloat() != null)
        {
            node.GetKeyfloat().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        OutAMultifloatFuncparams(node);
    }
    public virtual void InAMultistrFuncparams(AMultistrFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultistrFuncparams(AMultistrFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultistrFuncparams(AMultistrFuncparams node)
    {
        InAMultistrFuncparams(node);
        if(node.GetKeystr() != null)
        {
            node.GetKeystr().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        OutAMultistrFuncparams(node);
    }
    public virtual void InAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyFuncparams(AEmptyFuncparams node)
    {
        InAEmptyFuncparams(node);
        OutAEmptyFuncparams(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetKeyif() != null)
        {
            node.GetKeyif().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InASingleConditional(ASingleConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConditional(ASingleConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConditional(ASingleConditional node)
    {
        InASingleConditional(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutASingleConditional(node);
    }
    public virtual void InAMultipleandConditional(AMultipleandConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleandConditional(AMultipleandConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleandConditional(AMultipleandConditional node)
    {
        InAMultipleandConditional(node);
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetConjunction() != null)
        {
            node.GetConjunction().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        OutAMultipleandConditional(node);
    }
    public virtual void InANegateNegation(ANegateNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegateNegation(ANegateNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseANegateNegation(ANegateNegation node)
    {
        InANegateNegation(node);
        if(node.GetNotl() != null)
        {
            node.GetNotl().Apply(this);
        }
        OutANegateNegation(node);
    }
    public virtual void InADontnegateNegation(ADontnegateNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutADontnegateNegation(ADontnegateNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseADontnegateNegation(ADontnegateNegation node)
    {
        InADontnegateNegation(node);
        OutADontnegateNegation(node);
    }
    public virtual void InAVarBoolean(AVarBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarBoolean(AVarBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarBoolean(AVarBoolean node)
    {
        InAVarBoolean(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVarBoolean(node);
    }
    public virtual void InAIntBoolean(AIntBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntBoolean(AIntBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntBoolean(AIntBoolean node)
    {
        InAIntBoolean(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntBoolean(node);
    }
    public virtual void InAAndConjunction(AAndConjunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndConjunction(AAndConjunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndConjunction(AAndConjunction node)
    {
        InAAndConjunction(node);
        if(node.GetAndl() != null)
        {
            node.GetAndl().Apply(this);
        }
        OutAAndConjunction(node);
    }
    public virtual void InAPassConjunction(APassConjunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassConjunction(APassConjunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassConjunction(APassConjunction node)
    {
        InAPassConjunction(node);
        if(node.GetConjunction2() != null)
        {
            node.GetConjunction2().Apply(this);
        }
        OutAPassConjunction(node);
    }
    public virtual void InAConjunction2(AConjunction2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConjunction2(AConjunction2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAConjunction2(AConjunction2 node)
    {
        InAConjunction2(node);
        if(node.GetOrl() != null)
        {
            node.GetOrl().Apply(this);
        }
        OutAConjunction2(node);
    }
    public virtual void InACompareComparison(ACompareComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareComparison(ACompareComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareComparison(ACompareComparison node)
    {
        InACompareComparison(node);
        if(node.GetLeftside() != null)
        {
            node.GetLeftside().Apply(this);
        }
        if(node.GetOperation() != null)
        {
            node.GetOperation().Apply(this);
        }
        if(node.GetRightside() != null)
        {
            node.GetRightside().Apply(this);
        }
        OutACompareComparison(node);
    }
    public virtual void InABooleanintComparison(ABooleanintComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanintComparison(ABooleanintComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanintComparison(ABooleanintComparison node)
    {
        InABooleanintComparison(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutABooleanintComparison(node);
    }
    public virtual void InABooleanvarComparison(ABooleanvarComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanvarComparison(ABooleanvarComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanvarComparison(ABooleanvarComparison node)
    {
        InABooleanvarComparison(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutABooleanvarComparison(node);
    }
    public virtual void InAGreqOperation(AGreqOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreqOperation(AGreqOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreqOperation(AGreqOperation node)
    {
        InAGreqOperation(node);
        if(node.GetGreatereq() != null)
        {
            node.GetGreatereq().Apply(this);
        }
        OutAGreqOperation(node);
    }
    public virtual void InAGreaterOperation(AGreaterOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterOperation(AGreaterOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterOperation(AGreaterOperation node)
    {
        InAGreaterOperation(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterOperation(node);
    }
    public virtual void InALeqOperation(ALeqOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqOperation(ALeqOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqOperation(ALeqOperation node)
    {
        InALeqOperation(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALeqOperation(node);
    }
    public virtual void InALessOperation(ALessOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessOperation(ALessOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseALessOperation(ALessOperation node)
    {
        InALessOperation(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessOperation(node);
    }
    public virtual void InAEquivalenceOperation(AEquivalenceOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalenceOperation(AEquivalenceOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalenceOperation(AEquivalenceOperation node)
    {
        InAEquivalenceOperation(node);
        if(node.GetEquiv() != null)
        {
            node.GetEquiv().Apply(this);
        }
        OutAEquivalenceOperation(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetKeywhile() != null)
        {
            node.GetKeywhile().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAMainBlock(AMainBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainBlock(AMainBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainBlock(AMainBlock node)
    {
        InAMainBlock(node);
        if(node.GetKeymain() != null)
        {
            node.GetKeymain().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        OutAMainBlock(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainBlock() != null)
        {
            node.GetMainBlock().Apply(this);
        }
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstdec(AMultipleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstdec(AMultipleConstdec node)
    {
        InAMultipleConstdec(node);
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        OutAMultipleConstdec(node);
    }
    public virtual void InASingleConstdec(ASingleConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConstdec(ASingleConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConstdec(ASingleConstdec node)
    {
        InASingleConstdec(node);
        OutASingleConstdec(node);
    }
    public virtual void InAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFuncdec(AMultipleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFuncdec(AMultipleFuncdec node)
    {
        InAMultipleFuncdec(node);
        if(node.GetFuncdec() != null)
        {
            node.GetFuncdec().Apply(this);
        }
        if(node.GetDefineFunction() != null)
        {
            node.GetDefineFunction().Apply(this);
        }
        OutAMultipleFuncdec(node);
    }
    public virtual void InASingleFuncdec(ASingleFuncdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFuncdec(ASingleFuncdec node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFuncdec(ASingleFuncdec node)
    {
        InASingleFuncdec(node);
        OutASingleFuncdec(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionStatement() != null)
        {
            node.GetFunctionStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAIfblockStatement(AIfblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfblockStatement(AIfblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfblockStatement(AIfblockStatement node)
    {
        InAIfblockStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfblockStatement(node);
    }
    public virtual void InAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileblockStatement(AWhileblockStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileblockStatement(AWhileblockStatement node)
    {
        InAWhileblockStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileblockStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        InAConstantDeclaration(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyconst() != null)
        {
            node.GetKeyconst().Apply(this);
        }
        OutAConstantDeclaration(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression2(ASubtractExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression2(ASubtractExpression2 node)
    {
        InASubtractExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutASubtractExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression3(AMultiplyExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression3(AMultiplyExpression3 node)
    {
        InAMultiplyExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMultiplyExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InADivideExpression4(ADivideExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression4(ADivideExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression4(ADivideExpression4 node)
    {
        InADivideExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutADivideExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression5(AParenthesisExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression5(AParenthesisExpression5 node)
    {
        InAParenthesisExpression5(node);
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        OutAParenthesisExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression6(ANegativeExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression6(ANegativeExpression6 node)
    {
        InANegativeExpression6(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAFltOperand(AFltOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFltOperand(AFltOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFltOperand(AFltOperand node)
    {
        InAFltOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFltOperand(node);
    }
    public virtual void InAStrOperand(AStrOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrOperand(AStrOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrOperand(AStrOperand node)
    {
        InAStrOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStrOperand(node);
    }
    public virtual void InAFunctionStatement(AFunctionStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionStatement(AFunctionStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionStatement(AFunctionStatement node)
    {
        InAFunctionStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionStatement(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InADefineFunction(ADefineFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefineFunction(ADefineFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseADefineFunction(ADefineFunction node)
    {
        InADefineFunction(node);
        if(node.GetFuncclose() != null)
        {
            node.GetFuncclose().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetFuncopen() != null)
        {
            node.GetFuncopen().Apply(this);
        }
        if(node.GetParamclose() != null)
        {
            node.GetParamclose().Apply(this);
        }
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetParamopen() != null)
        {
            node.GetParamopen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyfunc() != null)
        {
            node.GetKeyfunc().Apply(this);
        }
        OutADefineFunction(node);
    }
    public virtual void InASingleintFuncparams(ASingleintFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleintFuncparams(ASingleintFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleintFuncparams(ASingleintFuncparams node)
    {
        InASingleintFuncparams(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyint() != null)
        {
            node.GetKeyint().Apply(this);
        }
        OutASingleintFuncparams(node);
    }
    public virtual void InASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASinglefloatFuncparams(ASinglefloatFuncparams node)
    {
        InASinglefloatFuncparams(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyfloat() != null)
        {
            node.GetKeyfloat().Apply(this);
        }
        OutASinglefloatFuncparams(node);
    }
    public virtual void InASinglestrFuncparams(ASinglestrFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutASinglestrFuncparams(ASinglestrFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseASinglestrFuncparams(ASinglestrFuncparams node)
    {
        InASinglestrFuncparams(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeystr() != null)
        {
            node.GetKeystr().Apply(this);
        }
        OutASinglestrFuncparams(node);
    }
    public virtual void InAMultintFuncparams(AMultintFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultintFuncparams(AMultintFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultintFuncparams(AMultintFuncparams node)
    {
        InAMultintFuncparams(node);
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyint() != null)
        {
            node.GetKeyint().Apply(this);
        }
        OutAMultintFuncparams(node);
    }
    public virtual void InAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultifloatFuncparams(AMultifloatFuncparams node)
    {
        InAMultifloatFuncparams(node);
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeyfloat() != null)
        {
            node.GetKeyfloat().Apply(this);
        }
        OutAMultifloatFuncparams(node);
    }
    public virtual void InAMultistrFuncparams(AMultistrFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultistrFuncparams(AMultistrFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultistrFuncparams(AMultistrFuncparams node)
    {
        InAMultistrFuncparams(node);
        if(node.GetFuncparams() != null)
        {
            node.GetFuncparams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetKeystr() != null)
        {
            node.GetKeystr().Apply(this);
        }
        OutAMultistrFuncparams(node);
    }
    public virtual void InAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyFuncparams(AEmptyFuncparams node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyFuncparams(AEmptyFuncparams node)
    {
        InAEmptyFuncparams(node);
        OutAEmptyFuncparams(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetKeyif() != null)
        {
            node.GetKeyif().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InASingleConditional(ASingleConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConditional(ASingleConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConditional(ASingleConditional node)
    {
        InASingleConditional(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutASingleConditional(node);
    }
    public virtual void InAMultipleandConditional(AMultipleandConditional node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleandConditional(AMultipleandConditional node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleandConditional(AMultipleandConditional node)
    {
        InAMultipleandConditional(node);
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetConjunction() != null)
        {
            node.GetConjunction().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetNegation() != null)
        {
            node.GetNegation().Apply(this);
        }
        OutAMultipleandConditional(node);
    }
    public virtual void InANegateNegation(ANegateNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegateNegation(ANegateNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseANegateNegation(ANegateNegation node)
    {
        InANegateNegation(node);
        if(node.GetNotl() != null)
        {
            node.GetNotl().Apply(this);
        }
        OutANegateNegation(node);
    }
    public virtual void InADontnegateNegation(ADontnegateNegation node)
    {
        DefaultIn(node);
    }

    public virtual void OutADontnegateNegation(ADontnegateNegation node)
    {
        DefaultOut(node);
    }

    public override void CaseADontnegateNegation(ADontnegateNegation node)
    {
        InADontnegateNegation(node);
        OutADontnegateNegation(node);
    }
    public virtual void InAVarBoolean(AVarBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarBoolean(AVarBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarBoolean(AVarBoolean node)
    {
        InAVarBoolean(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVarBoolean(node);
    }
    public virtual void InAIntBoolean(AIntBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntBoolean(AIntBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntBoolean(AIntBoolean node)
    {
        InAIntBoolean(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntBoolean(node);
    }
    public virtual void InAAndConjunction(AAndConjunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndConjunction(AAndConjunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndConjunction(AAndConjunction node)
    {
        InAAndConjunction(node);
        if(node.GetAndl() != null)
        {
            node.GetAndl().Apply(this);
        }
        OutAAndConjunction(node);
    }
    public virtual void InAPassConjunction(APassConjunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassConjunction(APassConjunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassConjunction(APassConjunction node)
    {
        InAPassConjunction(node);
        if(node.GetConjunction2() != null)
        {
            node.GetConjunction2().Apply(this);
        }
        OutAPassConjunction(node);
    }
    public virtual void InAConjunction2(AConjunction2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConjunction2(AConjunction2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAConjunction2(AConjunction2 node)
    {
        InAConjunction2(node);
        if(node.GetOrl() != null)
        {
            node.GetOrl().Apply(this);
        }
        OutAConjunction2(node);
    }
    public virtual void InACompareComparison(ACompareComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompareComparison(ACompareComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseACompareComparison(ACompareComparison node)
    {
        InACompareComparison(node);
        if(node.GetRightside() != null)
        {
            node.GetRightside().Apply(this);
        }
        if(node.GetOperation() != null)
        {
            node.GetOperation().Apply(this);
        }
        if(node.GetLeftside() != null)
        {
            node.GetLeftside().Apply(this);
        }
        OutACompareComparison(node);
    }
    public virtual void InABooleanintComparison(ABooleanintComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanintComparison(ABooleanintComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanintComparison(ABooleanintComparison node)
    {
        InABooleanintComparison(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutABooleanintComparison(node);
    }
    public virtual void InABooleanvarComparison(ABooleanvarComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooleanvarComparison(ABooleanvarComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseABooleanvarComparison(ABooleanvarComparison node)
    {
        InABooleanvarComparison(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutABooleanvarComparison(node);
    }
    public virtual void InAGreqOperation(AGreqOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreqOperation(AGreqOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreqOperation(AGreqOperation node)
    {
        InAGreqOperation(node);
        if(node.GetGreatereq() != null)
        {
            node.GetGreatereq().Apply(this);
        }
        OutAGreqOperation(node);
    }
    public virtual void InAGreaterOperation(AGreaterOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterOperation(AGreaterOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterOperation(AGreaterOperation node)
    {
        InAGreaterOperation(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterOperation(node);
    }
    public virtual void InALeqOperation(ALeqOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqOperation(ALeqOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqOperation(ALeqOperation node)
    {
        InALeqOperation(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALeqOperation(node);
    }
    public virtual void InALessOperation(ALessOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessOperation(ALessOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseALessOperation(ALessOperation node)
    {
        InALessOperation(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessOperation(node);
    }
    public virtual void InAEquivalenceOperation(AEquivalenceOperation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalenceOperation(AEquivalenceOperation node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalenceOperation(AEquivalenceOperation node)
    {
        InAEquivalenceOperation(node);
        if(node.GetEquiv() != null)
        {
            node.GetEquiv().Apply(this);
        }
        OutAEquivalenceOperation(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetBodyc() != null)
        {
            node.GetBodyc().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetBodyo() != null)
        {
            node.GetBodyo().Apply(this);
        }
        if(node.GetHeaderc() != null)
        {
            node.GetHeaderc().Apply(this);
        }
        if(node.GetConditional() != null)
        {
            node.GetConditional().Apply(this);
        }
        if(node.GetHeadero() != null)
        {
            node.GetHeadero().Apply(this);
        }
        if(node.GetKeywhile() != null)
        {
            node.GetKeywhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAMainBlock(AMainBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainBlock(AMainBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainBlock(AMainBlock node)
    {
        InAMainBlock(node);
        if(node.GetClosep() != null)
        {
            node.GetClosep().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenp() != null)
        {
            node.GetOpenp().Apply(this);
        }
        if(node.GetKeymain() != null)
        {
            node.GetKeymain().Apply(this);
        }
        OutAMainBlock(node);
    }
}
} // namespace CS426.analysis
