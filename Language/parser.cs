/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTEol(TEol node)
    {
        index = 0;
    }

    public override void CaseTGreatereq(TGreatereq node)
    {
        index = 1;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 2;
    }

    public override void CaseTLesseq(TLesseq node)
    {
        index = 3;
    }

    public override void CaseTLess(TLess node)
    {
        index = 4;
    }

    public override void CaseTEquiv(TEquiv node)
    {
        index = 5;
    }

    public override void CaseTAssign(TAssign node)
    {
        index = 6;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 7;
    }

    public override void CaseTMult(TMult node)
    {
        index = 8;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 9;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 10;
    }

    public override void CaseTOpenp(TOpenp node)
    {
        index = 11;
    }

    public override void CaseTClosep(TClosep node)
    {
        index = 12;
    }

    public override void CaseTAndl(TAndl node)
    {
        index = 13;
    }

    public override void CaseTOrl(TOrl node)
    {
        index = 14;
    }

    public override void CaseTNotl(TNotl node)
    {
        index = 15;
    }

    public override void CaseTComma(TComma node)
    {
        index = 16;
    }

    public override void CaseTKeyfloat(TKeyfloat node)
    {
        index = 17;
    }

    public override void CaseTKeyint(TKeyint node)
    {
        index = 18;
    }

    public override void CaseTKeyif(TKeyif node)
    {
        index = 19;
    }

    public override void CaseTKeyelse(TKeyelse node)
    {
        index = 20;
    }

    public override void CaseTKeyconst(TKeyconst node)
    {
        index = 21;
    }

    public override void CaseTKeystr(TKeystr node)
    {
        index = 22;
    }

    public override void CaseTKeyfunc(TKeyfunc node)
    {
        index = 23;
    }

    public override void CaseTKeywhile(TKeywhile node)
    {
        index = 24;
    }

    public override void CaseTKeymain(TKeymain node)
    {
        index = 25;
    }

    public override void CaseTId(TId node)
    {
        index = 26;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 27;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 28;
    }

    public override void CaseTString(TString node)
    {
        index = 29;
    }

    public override void CaseEOF(EOF node)
    {
        index = 30;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(3), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(4), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(4), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(4), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(5), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(6), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(6), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(6), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(7), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(8), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(9), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(9), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(10), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(10), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(11), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(11), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(12), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(12), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(13), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(13), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(14), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(14), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(15), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(15), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(15), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(15), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(16), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(17), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(17), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(18), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(19), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(19), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(19), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(19), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(19), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(19), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(19), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(20), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(21), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(21), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(22), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(22), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(23), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(23), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(24), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(24), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(25), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(26), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(26), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(26), list);
        }
        break;
                    case 58:
        {
      ArrayList list = New58();
      Push(GoTo(27), list);
        }
        break;
                    case 59:
        {
      ArrayList list = New59();
      Push(GoTo(27), list);
        }
        break;
                    case 60:
        {
      ArrayList list = New60();
      Push(GoTo(27), list);
        }
        break;
                    case 61:
        {
      ArrayList list = New61();
      Push(GoTo(27), list);
        }
        break;
                    case 62:
        {
      ArrayList list = New62();
      Push(GoTo(27), list);
        }
        break;
                    case 63:
        {
      ArrayList list = New63();
      Push(GoTo(28), list);
        }
        break;
                    case 64:
        {
      ArrayList list = New64();
      Push(GoTo(29), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstdec pconstdecNode2 = (PConstdec)nodeArrayList1[0];
        PFuncdec pfuncdecNode3 = (PFuncdec)nodeArrayList2[0];
        PMainBlock pmainblockNode4 = (PMainBlock)nodeArrayList3[0];
        AProgram pprogramNode1 = new AProgram (
              pconstdecNode2,
              pfuncdecNode3,
              pmainblockNode4
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstantDeclaration pconstantdeclarationNode2 = (PConstantDeclaration)nodeArrayList1[0];
        PConstdec pconstdecNode3 = (PConstdec)nodeArrayList2[0];
        AMultipleConstdec pconstdecNode1 = new AMultipleConstdec (
              pconstantdeclarationNode2,
              pconstdecNode3
        );
        nodeList.Add(pconstdecNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ASingleConstdec pconstdecNode1 = new ASingleConstdec (
        );
        nodeList.Add(pconstdecNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDefineFunction pdefinefunctionNode2 = (PDefineFunction)nodeArrayList1[0];
        PFuncdec pfuncdecNode3 = (PFuncdec)nodeArrayList2[0];
        AMultipleFuncdec pfuncdecNode1 = new AMultipleFuncdec (
              pdefinefunctionNode2,
              pfuncdecNode3
        );
        nodeList.Add(pfuncdecNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ASingleFuncdec pfuncdecNode1 = new ASingleFuncdec (
        );
        nodeList.Add(pfuncdecNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        AMultipleStatements pstatementsNode1 = new AMultipleStatements (
              pstatementNode2,
              pstatementsNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ASingleStatements pstatementsNode1 = new ASingleStatements (
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclareStatement pdeclarestatementNode2 = (PDeclareStatement)nodeArrayList1[0];
        ADeclarationStatement pstatementNode1 = new ADeclarationStatement (
              pdeclarestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignStatement passignstatementNode2 = (PAssignStatement)nodeArrayList1[0];
        AAssignmentStatement pstatementNode1 = new AAssignmentStatement (
              passignstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionStatement pfunctionstatementNode2 = (PFunctionStatement)nodeArrayList1[0];
        ACallStatement pstatementNode1 = new ACallStatement (
              pfunctionstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStatement pifstatementNode2 = (PIfStatement)nodeArrayList1[0];
        AIfblockStatement pstatementNode1 = new AIfblockStatement (
              pifstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileStatement pwhilestatementNode2 = (PWhileStatement)nodeArrayList1[0];
        AWhileblockStatement pstatementNode1 = new AWhileblockStatement (
              pwhilestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PVar pvarNode2 = (PVar)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclareStatement pdeclarestatementNode1 = new ADeclareStatement (
              pvarNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestatementNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyfloat tkeyfloatNode2 = (TKeyfloat)nodeArrayList1[0];
        AFloatvarVar pvarNode1 = new AFloatvarVar (
              tkeyfloatNode2
        );
        nodeList.Add(pvarNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyint tkeyintNode2 = (TKeyint)nodeArrayList1[0];
        AIntvarVar pvarNode1 = new AIntvarVar (
              tkeyintNode2
        );
        nodeList.Add(pvarNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeystr tkeystrNode2 = (TKeystr)nodeArrayList1[0];
        AStrvarVar pvarNode1 = new AStrvarVar (
              tkeystrNode2
        );
        nodeList.Add(pvarNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyconst tkeyconstNode2 = (TKeyconst)nodeArrayList1[0];
        PVar pvarNode3 = (PVar)nodeArrayList2[0];
        PAssignStatement passignstatementNode4 = (PAssignStatement)nodeArrayList3[0];
        AConstantDeclaration pconstantdeclarationNode1 = new AConstantDeclaration (
              tkeyconstNode2,
              pvarNode3,
              passignstatementNode4
        );
        nodeList.Add(pconstantdeclarationNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignStatement passignstatementNode1 = new AAssignStatement (
              tidNode2,
              tassignNode3,
              pexpressionNode4,
              teolNode5
        );
        nodeList.Add(passignstatementNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AAddExpression pexpressionNode1 = new AAddExpression (
              pexpressionNode2,
              tplusNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        APassExpression pexpressionNode1 = new APassExpression (
              pexpression2Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        ASubtractExpression2 pexpression2Node1 = new ASubtractExpression2 (
              pexpression2Node2,
              tminusNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        APassExpression2 pexpression2Node1 = new APassExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        AMultiplyExpression3 pexpression3Node1 = new AMultiplyExpression3 (
              pexpression3Node2,
              tmultNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        APassExpression3 pexpression3Node1 = new APassExpression3 (
              pexpression4Node2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        PExpression5 pexpression5Node4 = (PExpression5)nodeArrayList3[0];
        ADivideExpression4 pexpression4Node1 = new ADivideExpression4 (
              pexpression4Node2,
              tdivideNode3,
              pexpression5Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression5 pexpression5Node2 = (PExpression5)nodeArrayList1[0];
        APassExpression4 pexpression4Node1 = new APassExpression4 (
              pexpression5Node2
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOpenp topenpNode2 = (TOpenp)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TClosep tclosepNode4 = (TClosep)nodeArrayList3[0];
        AParenthesisExpression5 pexpression5Node1 = new AParenthesisExpression5 (
              topenpNode2,
              pexpressionNode3,
              tclosepNode4
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression6 pexpression6Node2 = (PExpression6)nodeArrayList1[0];
        APassExpression5 pexpression5Node1 = new APassExpression5 (
              pexpression6Node2
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        POperand poperandNode3 = (POperand)nodeArrayList2[0];
        ANegativeExpression6 pexpression6Node1 = new ANegativeExpression6 (
              tminusNode2,
              poperandNode3
        );
        nodeList.Add(pexpression6Node1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassExpression6 pexpression6Node1 = new APassExpression6 (
              poperandNode2
        );
        nodeList.Add(pexpression6Node1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFltOperand poperandNode1 = new AFltOperand (
              tfloatNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStrOperand poperandNode1 = new AStrOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctionStatement pfunctionstatementNode1 = new AFunctionStatement (
              tidNode2,
              topenpNode3,
              pparametersNode4,
              tclosepNode5,
              teolNode6
        );
        nodeList.Add(pfunctionstatementNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        ASingleParameters pparametersNode1 = new ASingleParameters (
              pexpressionNode2
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        AMultipleParameters pparametersNode1 = new AMultipleParameters (
              pexpressionNode2,
              tcommaNode3,
              pparametersNode4
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyfunc tkeyfuncNode2 = (TKeyfunc)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TOpenp topenpNode4 = (TOpenp)nodeArrayList3[0];
        PFuncparams pfuncparamsNode5 = (PFuncparams)nodeArrayList4[0];
        TClosep tclosepNode6 = (TClosep)nodeArrayList5[0];
        TOpenp topenpNode7 = (TOpenp)nodeArrayList6[0];
        PStatements pstatementsNode8 = (PStatements)nodeArrayList7[0];
        TClosep tclosepNode9 = (TClosep)nodeArrayList8[0];
        ADefineFunction pdefinefunctionNode1 = new ADefineFunction (
              tkeyfuncNode2,
              tidNode3,
              topenpNode4,
              pfuncparamsNode5,
              tclosepNode6,
              topenpNode7,
              pstatementsNode8,
              tclosepNode9
        );
        nodeList.Add(pdefinefunctionNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyint tkeyintNode2 = (TKeyint)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        ASingleintFuncparams pfuncparamsNode1 = new ASingleintFuncparams (
              tkeyintNode2,
              tidNode3
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyfloat tkeyfloatNode2 = (TKeyfloat)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        ASinglefloatFuncparams pfuncparamsNode1 = new ASinglefloatFuncparams (
              tkeyfloatNode2,
              tidNode3
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeystr tkeystrNode2 = (TKeystr)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        ASinglestrFuncparams pfuncparamsNode1 = new ASinglestrFuncparams (
              tkeystrNode2,
              tidNode3
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyint tkeyintNode2 = (TKeyint)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TComma tcommaNode4 = (TComma)nodeArrayList3[0];
        PFuncparams pfuncparamsNode5 = (PFuncparams)nodeArrayList4[0];
        AMultintFuncparams pfuncparamsNode1 = new AMultintFuncparams (
              tkeyintNode2,
              tidNode3,
              tcommaNode4,
              pfuncparamsNode5
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyfloat tkeyfloatNode2 = (TKeyfloat)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TComma tcommaNode4 = (TComma)nodeArrayList3[0];
        PFuncparams pfuncparamsNode5 = (PFuncparams)nodeArrayList4[0];
        AMultifloatFuncparams pfuncparamsNode1 = new AMultifloatFuncparams (
              tkeyfloatNode2,
              tidNode3,
              tcommaNode4,
              pfuncparamsNode5
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeystr tkeystrNode2 = (TKeystr)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TComma tcommaNode4 = (TComma)nodeArrayList3[0];
        PFuncparams pfuncparamsNode5 = (PFuncparams)nodeArrayList4[0];
        AMultistrFuncparams pfuncparamsNode1 = new AMultistrFuncparams (
              tkeystrNode2,
              tidNode3,
              tcommaNode4,
              pfuncparamsNode5
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        AEmptyFuncparams pfuncparamsNode1 = new AEmptyFuncparams (
        );
        nodeList.Add(pfuncparamsNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeyif tkeyifNode2 = (TKeyif)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PConditional pconditionalNode4 = (PConditional)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TOpenp topenpNode6 = (TOpenp)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TClosep tclosepNode8 = (TClosep)nodeArrayList7[0];
        AIfStatement pifstatementNode1 = new AIfStatement (
              tkeyifNode2,
              topenpNode3,
              pconditionalNode4,
              tclosepNode5,
              topenpNode6,
              pstatementsNode7,
              tclosepNode8
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PNegation pnegationNode2 = (PNegation)nodeArrayList1[0];
        PComparison pcomparisonNode3 = (PComparison)nodeArrayList2[0];
        ASingleConditional pconditionalNode1 = new ASingleConditional (
              pnegationNode2,
              pcomparisonNode3
        );
        nodeList.Add(pconditionalNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PNegation pnegationNode2 = (PNegation)nodeArrayList1[0];
        PComparison pcomparisonNode3 = (PComparison)nodeArrayList2[0];
        PConjunction pconjunctionNode4 = (PConjunction)nodeArrayList3[0];
        PConditional pconditionalNode5 = (PConditional)nodeArrayList4[0];
        AMultipleandConditional pconditionalNode1 = new AMultipleandConditional (
              pnegationNode2,
              pcomparisonNode3,
              pconjunctionNode4,
              pconditionalNode5
        );
        nodeList.Add(pconditionalNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNotl tnotlNode2 = (TNotl)nodeArrayList1[0];
        ANegateNegation pnegationNode1 = new ANegateNegation (
              tnotlNode2
        );
        nodeList.Add(pnegationNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ADontnegateNegation pnegationNode1 = new ADontnegateNegation (
        );
        nodeList.Add(pnegationNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVarBoolean pbooleanNode1 = new AVarBoolean (
              tidNode2
        );
        nodeList.Add(pbooleanNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntBoolean pbooleanNode1 = new AIntBoolean (
              tintegerNode2
        );
        nodeList.Add(pbooleanNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAndl tandlNode2 = (TAndl)nodeArrayList1[0];
        AAndConjunction pconjunctionNode1 = new AAndConjunction (
              tandlNode2
        );
        nodeList.Add(pconjunctionNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConjunction2 pconjunction2Node2 = (PConjunction2)nodeArrayList1[0];
        APassConjunction pconjunctionNode1 = new APassConjunction (
              pconjunction2Node2
        );
        nodeList.Add(pconjunctionNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOrl torlNode2 = (TOrl)nodeArrayList1[0];
        AConjunction2 pconjunction2Node1 = new AConjunction2 (
              torlNode2
        );
        nodeList.Add(pconjunction2Node1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        POperation poperationNode3 = (POperation)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        ACompareComparison pcomparisonNode1 = new ACompareComparison (
              pexpressionNode2,
              poperationNode3,
              pexpressionNode4
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        ABooleanintComparison pcomparisonNode1 = new ABooleanintComparison (
              tintegerNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        ABooleanvarComparison pcomparisonNode1 = new ABooleanvarComparison (
              tidNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New58()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGreatereq tgreatereqNode2 = (TGreatereq)nodeArrayList1[0];
        AGreqOperation poperationNode1 = new AGreqOperation (
              tgreatereqNode2
        );
        nodeList.Add(poperationNode1);
        return nodeList;
    }
    ArrayList New59()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGreater tgreaterNode2 = (TGreater)nodeArrayList1[0];
        AGreaterOperation poperationNode1 = new AGreaterOperation (
              tgreaterNode2
        );
        nodeList.Add(poperationNode1);
        return nodeList;
    }
    ArrayList New60()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLesseq tlesseqNode2 = (TLesseq)nodeArrayList1[0];
        ALeqOperation poperationNode1 = new ALeqOperation (
              tlesseqNode2
        );
        nodeList.Add(poperationNode1);
        return nodeList;
    }
    ArrayList New61()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLess tlessNode2 = (TLess)nodeArrayList1[0];
        ALessOperation poperationNode1 = new ALessOperation (
              tlessNode2
        );
        nodeList.Add(poperationNode1);
        return nodeList;
    }
    ArrayList New62()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TEquiv tequivNode2 = (TEquiv)nodeArrayList1[0];
        AEquivalenceOperation poperationNode1 = new AEquivalenceOperation (
              tequivNode2
        );
        nodeList.Add(poperationNode1);
        return nodeList;
    }
    ArrayList New63()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywhile tkeywhileNode2 = (TKeywhile)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PConditional pconditionalNode4 = (PConditional)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        TOpenp topenpNode6 = (TOpenp)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TClosep tclosepNode8 = (TClosep)nodeArrayList7[0];
        AWhileStatement pwhilestatementNode1 = new AWhileStatement (
              tkeywhileNode2,
              topenpNode3,
              pconditionalNode4,
              tclosepNode5,
              topenpNode6,
              pstatementsNode7,
              tclosepNode8
        );
        nodeList.Add(pwhilestatementNode1);
        return nodeList;
    }
    ArrayList New64()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeymain tkeymainNode2 = (TKeymain)nodeArrayList1[0];
        TOpenp topenpNode3 = (TOpenp)nodeArrayList2[0];
        PStatements pstatementsNode4 = (PStatements)nodeArrayList3[0];
        TClosep tclosepNode5 = (TClosep)nodeArrayList4[0];
        AMainBlock pmainblockNode1 = new AMainBlock (
              tkeymainNode2,
              topenpNode3,
              pstatementsNode4,
              tclosepNode5
        );
        nodeList.Add(pmainblockNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {21, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {17, 0, 5},
        new int[] {18, 0, 6},
        new int[] {22, 0, 7},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {30, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 4},
        new int[] {23, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {21, 0, 1},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {26, 0, 13},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {26, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {25, 0, 16},
      },
      new int[][] {
        new int[] {-1, 1, 4},
        new int[] {23, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {6, 0, 19},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {11, 0, 20},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {11, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {17, 0, 35},
        new int[] {18, 0, 36},
        new int[] {22, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {17, 0, 5},
        new int[] {18, 0, 6},
        new int[] {19, 0, 39},
        new int[] {22, 0, 7},
        new int[] {24, 0, 40},
        new int[] {26, 0, 41},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {0, 0, 52},
        new int[] {7, 0, 53},
      },
      new int[][] {
        new int[] {-1, 1, 19},
        new int[] {9, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 21},
        new int[] {8, 0, 55},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {10, 0, 56},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {26, 0, 57},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {26, 0, 58},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {26, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {12, 0, 60},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {11, 0, 61},
      },
      new int[][] {
        new int[] {-1, 3, 40},
        new int[] {11, 0, 62},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {6, 0, 19},
        new int[] {11, 0, 63},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {12, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {17, 0, 5},
        new int[] {18, 0, 6},
        new int[] {19, 0, 39},
        new int[] {22, 0, 7},
        new int[] {24, 0, 40},
        new int[] {26, 0, 41},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {26, 0, 66},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {7, 0, 53},
        new int[] {12, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 56},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {16, 0, 72},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {16, 0, 73},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {16, 0, 74},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {11, 0, 75},
      },
      new int[][] {
        new int[] {-1, 1, 49},
        new int[] {15, 0, 76},
      },
      new int[][] {
        new int[] {-1, 1, 49},
        new int[] {15, 0, 76},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 1, 64},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {0, 0, 82},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {9, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {8, 0, 55},
      },
      new int[][] {
        new int[] {-1, 1, 22},
        new int[] {10, 0, 56},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {17, 0, 35},
        new int[] {18, 0, 36},
        new int[] {22, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {17, 0, 35},
        new int[] {18, 0, 36},
        new int[] {22, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {17, 0, 35},
        new int[] {18, 0, 36},
        new int[] {22, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {17, 0, 5},
        new int[] {18, 0, 6},
        new int[] {19, 0, 39},
        new int[] {22, 0, 7},
        new int[] {24, 0, 40},
        new int[] {26, 0, 41},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 3, 77},
        new int[] {12, 0, 87},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 88},
        new int[] {27, 0, 25},
        new int[] {28, 0, 89},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 79},
        new int[] {12, 0, 92},
      },
      new int[][] {
        new int[] {-1, 1, 35},
        new int[] {7, 0, 53},
        new int[] {16, 0, 93},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {12, 0, 94},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {12, 0, 95},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {11, 0, 96},
      },
      new int[][] {
        new int[] {-1, 1, 31},
        new int[] {12, 1, 57},
        new int[] {13, 1, 57},
        new int[] {14, 1, 57},
      },
      new int[][] {
        new int[] {-1, 1, 30},
        new int[] {12, 1, 56},
        new int[] {13, 1, 56},
        new int[] {14, 1, 56},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {1, 0, 97},
        new int[] {2, 0, 98},
        new int[] {3, 0, 99},
        new int[] {4, 0, 100},
        new int[] {5, 0, 101},
        new int[] {7, 0, 53},
      },
      new int[][] {
        new int[] {-1, 1, 46},
        new int[] {13, 0, 103},
        new int[] {14, 0, 104},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {11, 0, 107},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {0, 0, 109},
      },
      new int[][] {
        new int[] {-1, 1, 37},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {17, 0, 5},
        new int[] {18, 0, 6},
        new int[] {19, 0, 39},
        new int[] {22, 0, 7},
        new int[] {24, 0, 40},
        new int[] {26, 0, 41},
      },
      new int[][] {
        new int[] {-1, 1, 58},
      },
      new int[][] {
        new int[] {-1, 1, 59},
      },
      new int[][] {
        new int[] {-1, 1, 60},
      },
      new int[][] {
        new int[] {-1, 1, 61},
      },
      new int[][] {
        new int[] {-1, 1, 62},
      },
      new int[][] {
        new int[] {-1, 3, 102},
        new int[] {9, 0, 22},
        new int[] {11, 0, 23},
        new int[] {26, 0, 24},
        new int[] {27, 0, 25},
        new int[] {28, 0, 26},
        new int[] {29, 0, 27},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 1, 49},
        new int[] {15, 0, 76},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 1, 6},
        new int[] {17, 0, 5},
        new int[] {18, 0, 6},
        new int[] {19, 0, 39},
        new int[] {22, 0, 7},
        new int[] {24, 0, 40},
        new int[] {26, 0, 41},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
      new int[][] {
        new int[] {-1, 3, 110},
        new int[] {12, 0, 114},
      },
      new int[][] {
        new int[] {-1, 1, 55},
        new int[] {7, 0, 53},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 3, 113},
        new int[] {12, 0, 115},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 63},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 3},
        new int[] {4, 12},
      },
      new int[][] {
        new int[] {-1, 10},
        new int[] {11, 18},
      },
      new int[][] {
        new int[] {-1, 42},
        new int[] {43, 65},
        new int[] {75, 86},
        new int[] {96, 110},
        new int[] {107, 113},
      },
      new int[][] {
        new int[] {-1, 43},
      },
      new int[][] {
        new int[] {-1, 44},
      },
      new int[][] {
        new int[] {-1, 45},
        new int[] {1, 8},
      },
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 46},
        new int[] {8, 14},
      },
      new int[][] {
        new int[] {-1, 80},
        new int[] {19, 28},
        new int[] {23, 51},
        new int[] {78, 90},
        new int[] {102, 111},
      },
      new int[][] {
        new int[] {-1, 29},
        new int[] {53, 68},
      },
      new int[][] {
        new int[] {-1, 30},
        new int[] {54, 69},
      },
      new int[][] {
        new int[] {-1, 31},
        new int[] {55, 70},
      },
      new int[][] {
        new int[] {-1, 32},
        new int[] {56, 71},
      },
      new int[][] {
        new int[] {-1, 33},
      },
      new int[][] {
        new int[] {-1, 34},
        new int[] {22, 50},
      },
      new int[][] {
        new int[] {-1, 47},
      },
      new int[][] {
        new int[] {-1, 81},
        new int[] {93, 108},
      },
      new int[][] {
        new int[] {-1, 11},
      },
      new int[][] {
        new int[] {-1, 38},
        new int[] {72, 83},
        new int[] {73, 84},
        new int[] {74, 85},
      },
      new int[][] {
        new int[] {-1, 48},
      },
      new int[][] {
        new int[] {-1, 77},
        new int[] {62, 79},
        new int[] {105, 112},
      },
      new int[][] {
        new int[] {-1, 78},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, 105},
      },
      new int[][] {
        new int[] {-1, 106},
      },
      new int[][] {
        new int[] {-1, 91},
      },
      new int[][] {
        new int[] {-1, 102},
      },
      new int[][] {
        new int[] {-1, 49},
      },
      new int[][] {
        new int[] {-1, 17},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'const', 'func', 'main'",
      "expecting: 'float', 'int', 'str'",
      "expecting: EOF",
      "expecting: 'func', 'main'",
      "expecting: id",
      "expecting: 'main'",
      "expecting: '='",
      "expecting: '('",
      "expecting: '-', '(', id, float, integer, string",
      "expecting: ')', 'float', 'int', 'str'",
      "expecting: ')', 'float', 'int', 'if', 'str', 'while', id",
      "expecting: id, float, integer, string",
      "expecting: ';', '>=', '>', '<=', '<', '==', '+', '*', '-', '/', ')', 'AND', 'OR', ','",
      "expecting: ';', '+'",
      "expecting: ';', '>=', '>', '<=', '<', '==', '+', '-', ')', 'AND', 'OR', ','",
      "expecting: ';', '>=', '>', '<=', '<', '==', '+', '*', '-', ')', 'AND', 'OR', ','",
      "expecting: ')'",
      "expecting: '=', '('",
      "expecting: '+', ')'",
      "expecting: ')', 'float', 'int', 'if', 'const', 'str', 'func', 'while', 'main', id",
      "expecting: ')', ','",
      "expecting: '-', '(', 'NOT', id, float, integer, string",
      "expecting: ';'",
      "expecting: '+', ')', ','",
      "expecting: '>=', '>', '<=', '<', '==', '+', '*', '-', '/', ')', 'AND', 'OR'",
      "expecting: '>=', '>', '<=', '<', '==', '+'",
      "expecting: ')', 'AND', 'OR'",
      "expecting: '+', ')', 'AND', 'OR'",
    };

    private static int[] errors = {
      0, 1, 2, 3, 0, 4, 4, 4, 4, 4, 5, 3, 3, 6, 0, 7, 
      7, 2, 5, 8, 9, 10, 11, 8, 12, 12, 12, 12, 13, 14, 15, 12, 
      12, 12, 12, 4, 4, 4, 16, 7, 7, 17, 16, 10, 10, 4, 10, 10, 
      10, 10, 12, 18, 19, 8, 8, 8, 8, 20, 20, 20, 7, 21, 21, 8, 
      2, 16, 22, 12, 14, 15, 12, 12, 9, 9, 9, 10, 8, 16, 8, 16, 
      23, 16, 10, 16, 16, 16, 16, 7, 24, 24, 25, 26, 7, 8, 22, 3, 
      10, 8, 8, 8, 8, 8, 8, 21, 21, 21, 21, 10, 16, 10, 16, 27, 
      16, 16, 10, 10, 
    };
}
}
