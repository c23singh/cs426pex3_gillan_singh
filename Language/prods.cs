/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PConstdec : Node
{
}

public abstract class PFuncdec : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PConstantDeclaration : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpression5 : Node
{
}

public abstract class PExpression6 : Node
{
}

public abstract class POperand : Node
{
}

public abstract class PFunctionStatement : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PDefineFunction : Node
{
}

public abstract class PFuncparams : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PConditional : Node
{
}

public abstract class PNegation : Node
{
}

public abstract class PBoolean : Node
{
}

public abstract class PConjunction : Node
{
}

public abstract class PConjunction2 : Node
{
}

public abstract class PComparison : Node
{
}

public abstract class POperation : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class PMainBlock : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstdec _constdec_;
    private PFuncdec _funcdec_;
    private PMainBlock _main_block_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstdec _constdec_,
            PFuncdec _funcdec_,
            PMainBlock _main_block_
    )
    {
        SetConstdec (_constdec_);
        SetFuncdec (_funcdec_);
        SetMainBlock (_main_block_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstdec)CloneNode (_constdec_),
            (PFuncdec)CloneNode (_funcdec_),
            (PMainBlock)CloneNode (_main_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstdec GetConstdec ()
    {
        return _constdec_;
    }

    public void SetConstdec (PConstdec node)
    {
        if(_constdec_ != null)
        {
            _constdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constdec_ = node;
    }
    public PFuncdec GetFuncdec ()
    {
        return _funcdec_;
    }

    public void SetFuncdec (PFuncdec node)
    {
        if(_funcdec_ != null)
        {
            _funcdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcdec_ = node;
    }
    public PMainBlock GetMainBlock ()
    {
        return _main_block_;
    }

    public void SetMainBlock (PMainBlock node)
    {
        if(_main_block_ != null)
        {
            _main_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constdec_)
            + ToString (_funcdec_)
            + ToString (_main_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constdec_ == child )
        {
            _constdec_ = null;
            return;
        }
        if ( _funcdec_ == child )
        {
            _funcdec_ = null;
            return;
        }
        if ( _main_block_ == child )
        {
            _main_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constdec_ == oldChild )
        {
            SetConstdec ((PConstdec) newChild);
            return;
        }
        if ( _funcdec_ == oldChild )
        {
            SetFuncdec ((PFuncdec) newChild);
            return;
        }
        if ( _main_block_ == oldChild )
        {
            SetMainBlock ((PMainBlock) newChild);
            return;
        }
    }

}
public sealed class AMultipleConstdec : PConstdec
{
    private PConstantDeclaration _constant_declaration_;
    private PConstdec _constdec_;

    public AMultipleConstdec ()
    {
    }

    public AMultipleConstdec (
            PConstantDeclaration _constant_declaration_,
            PConstdec _constdec_
    )
    {
        SetConstantDeclaration (_constant_declaration_);
        SetConstdec (_constdec_);
    }

    public override Object Clone()
    {
        return new AMultipleConstdec (
            (PConstantDeclaration)CloneNode (_constant_declaration_),
            (PConstdec)CloneNode (_constdec_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleConstdec(this);
    }

    public PConstantDeclaration GetConstantDeclaration ()
    {
        return _constant_declaration_;
    }

    public void SetConstantDeclaration (PConstantDeclaration node)
    {
        if(_constant_declaration_ != null)
        {
            _constant_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declaration_ = node;
    }
    public PConstdec GetConstdec ()
    {
        return _constdec_;
    }

    public void SetConstdec (PConstdec node)
    {
        if(_constdec_ != null)
        {
            _constdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constdec_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declaration_)
            + ToString (_constdec_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declaration_ == child )
        {
            _constant_declaration_ = null;
            return;
        }
        if ( _constdec_ == child )
        {
            _constdec_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declaration_ == oldChild )
        {
            SetConstantDeclaration ((PConstantDeclaration) newChild);
            return;
        }
        if ( _constdec_ == oldChild )
        {
            SetConstdec ((PConstdec) newChild);
            return;
        }
    }

}
public sealed class ASingleConstdec : PConstdec
{


    public ASingleConstdec (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleConstdec (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleConstdec(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMultipleFuncdec : PFuncdec
{
    private PDefineFunction _define_function_;
    private PFuncdec _funcdec_;

    public AMultipleFuncdec ()
    {
    }

    public AMultipleFuncdec (
            PDefineFunction _define_function_,
            PFuncdec _funcdec_
    )
    {
        SetDefineFunction (_define_function_);
        SetFuncdec (_funcdec_);
    }

    public override Object Clone()
    {
        return new AMultipleFuncdec (
            (PDefineFunction)CloneNode (_define_function_),
            (PFuncdec)CloneNode (_funcdec_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleFuncdec(this);
    }

    public PDefineFunction GetDefineFunction ()
    {
        return _define_function_;
    }

    public void SetDefineFunction (PDefineFunction node)
    {
        if(_define_function_ != null)
        {
            _define_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_function_ = node;
    }
    public PFuncdec GetFuncdec ()
    {
        return _funcdec_;
    }

    public void SetFuncdec (PFuncdec node)
    {
        if(_funcdec_ != null)
        {
            _funcdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcdec_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_function_)
            + ToString (_funcdec_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_function_ == child )
        {
            _define_function_ = null;
            return;
        }
        if ( _funcdec_ == child )
        {
            _funcdec_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_function_ == oldChild )
        {
            SetDefineFunction ((PDefineFunction) newChild);
            return;
        }
        if ( _funcdec_ == oldChild )
        {
            SetFuncdec ((PFuncdec) newChild);
            return;
        }
    }

}
public sealed class ASingleFuncdec : PFuncdec
{


    public ASingleFuncdec (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleFuncdec (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleFuncdec(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{


    public ASingleStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionStatement _function_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionStatement _function_statement_
    )
    {
        SetFunctionStatement (_function_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionStatement)CloneNode (_function_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionStatement GetFunctionStatement ()
    {
        return _function_statement_;
    }

    public void SetFunctionStatement (PFunctionStatement node)
    {
        if(_function_statement_ != null)
        {
            _function_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_statement_ == child )
        {
            _function_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_statement_ == oldChild )
        {
            SetFunctionStatement ((PFunctionStatement) newChild);
            return;
        }
    }

}
public sealed class AIfblockStatement : PStatement
{
    private PIfStatement _if_statement_;

    public AIfblockStatement ()
    {
    }

    public AIfblockStatement (
            PIfStatement _if_statement_
    )
    {
        SetIfStatement (_if_statement_);
    }

    public override Object Clone()
    {
        return new AIfblockStatement (
            (PIfStatement)CloneNode (_if_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfblockStatement(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
    }

}
public sealed class AWhileblockStatement : PStatement
{
    private PWhileStatement _while_statement_;

    public AWhileblockStatement ()
    {
    }

    public AWhileblockStatement (
            PWhileStatement _while_statement_
    )
    {
        SetWhileStatement (_while_statement_);
    }

    public override Object Clone()
    {
        return new AWhileblockStatement (
            (PWhileStatement)CloneNode (_while_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileblockStatement(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclareStatement ()
    {
    }

    public ADeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AConstantDeclaration : PConstantDeclaration
{
    private TKeyconst _keyconst_;
    private TId _id_;
    private PAssignStatement _assign_statement_;

    public AConstantDeclaration ()
    {
    }

    public AConstantDeclaration (
            TKeyconst _keyconst_,
            TId _id_,
            PAssignStatement _assign_statement_
    )
    {
        SetKeyconst (_keyconst_);
        SetId (_id_);
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AConstantDeclaration (
            (TKeyconst)CloneNode (_keyconst_),
            (TId)CloneNode (_id_),
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantDeclaration(this);
    }

    public TKeyconst GetKeyconst ()
    {
        return _keyconst_;
    }

    public void SetKeyconst (TKeyconst node)
    {
        if(_keyconst_ != null)
        {
            _keyconst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyconst_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyconst_)
            + ToString (_id_)
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyconst_ == child )
        {
            _keyconst_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyconst_ == oldChild )
        {
            SetKeyconst ((TKeyconst) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AAssignStatement ()
    {
    }

    public AAssignStatement (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAddExpression : PExpression
{
    private PExpression _expression_;
    private TPlus _plus_;
    private PExpression2 _expression2_;

    public AAddExpression ()
    {
    }

    public AAddExpression (
            PExpression _expression_,
            TPlus _plus_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetPlus (_plus_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AAddExpression (
            (PExpression)CloneNode (_expression_),
            (TPlus)CloneNode (_plus_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_plus_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ASubtractExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TMinus _minus_;
    private PExpression3 _expression3_;

    public ASubtractExpression2 ()
    {
    }

    public ASubtractExpression2 (
            PExpression2 _expression2_,
            TMinus _minus_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetMinus (_minus_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ASubtractExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TMinus)CloneNode (_minus_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_minus_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TMult _mult_;
    private PExpression4 _expression4_;

    public AMultiplyExpression3 ()
    {
    }

    public AMultiplyExpression3 (
            PExpression3 _expression3_,
            TMult _mult_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetMult (_mult_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TMult)CloneNode (_mult_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_mult_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ADivideExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TDivide _divide_;
    private PExpression5 _expression5_;

    public ADivideExpression4 ()
    {
    }

    public ADivideExpression4 (
            PExpression4 _expression4_,
            TDivide _divide_,
            PExpression5 _expression5_
    )
    {
        SetExpression4 (_expression4_);
        SetDivide (_divide_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new ADivideExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TDivide)CloneNode (_divide_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_divide_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private PExpression5 _expression5_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            PExpression5 _expression5_
    )
    {
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AParenthesisExpression5 : PExpression5
{
    private TOpenp _openp_;
    private PExpression _expression_;
    private TClosep _closep_;

    public AParenthesisExpression5 ()
    {
    }

    public AParenthesisExpression5 (
            TOpenp _openp_,
            PExpression _expression_,
            TClosep _closep_
    )
    {
        SetOpenp (_openp_);
        SetExpression (_expression_);
        SetClosep (_closep_);
    }

    public override Object Clone()
    {
        return new AParenthesisExpression5 (
            (TOpenp)CloneNode (_openp_),
            (PExpression)CloneNode (_expression_),
            (TClosep)CloneNode (_closep_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisExpression5(this);
    }

    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_openp_)
            + ToString (_expression_)
            + ToString (_closep_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
    }

}
public sealed class APassExpression5 : PExpression5
{
    private PExpression6 _expression6_;

    public APassExpression5 ()
    {
    }

    public APassExpression5 (
            PExpression6 _expression6_
    )
    {
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new APassExpression5 (
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression5(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression6 : PExpression6
{
    private TMinus _minus_;
    private POperand _operand_;

    public ANegativeExpression6 ()
    {
    }

    public ANegativeExpression6 (
            TMinus _minus_,
            POperand _operand_
    )
    {
        SetMinus (_minus_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression6 (
            (TMinus)CloneNode (_minus_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression6(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpression6 : PExpression6
{
    private POperand _operand_;

    public APassExpression6 ()
    {
    }

    public APassExpression6 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression6 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression6(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AFltOperand : POperand
{
    private TFloat _float_;

    public AFltOperand ()
    {
    }

    public AFltOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFltOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFltOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AStrOperand : POperand
{
    private TString _string_;

    public AStrOperand ()
    {
    }

    public AStrOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStrOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStrOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AFunctionStatement : PFunctionStatement
{
    private TId _id_;
    private TOpenp _openp_;
    private PParameters _parameters_;
    private TClosep _closep_;
    private TEol _eol_;

    public AFunctionStatement ()
    {
    }

    public AFunctionStatement (
            TId _id_,
            TOpenp _openp_,
            PParameters _parameters_,
            TClosep _closep_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenp (_openp_);
        SetParameters (_parameters_);
        SetClosep (_closep_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionStatement (
            (TId)CloneNode (_id_),
            (TOpenp)CloneNode (_openp_),
            (PParameters)CloneNode (_parameters_),
            (TClosep)CloneNode (_closep_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_openp_)
            + ToString (_parameters_)
            + ToString (_closep_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private PExpression _expression_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AMultipleParameters : PParameters
{
    private PExpression _expression_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMultipleParameters ()
    {
    }

    public AMultipleParameters (
            PExpression _expression_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetExpression (_expression_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParameters (
            (PExpression)CloneNode (_expression_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParameters(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ADefineFunction : PDefineFunction
{
    private TKeyfunc _keyfunc_;
    private TId _id_;
    private TOpenp _paramopen_;
    private PFuncparams _funcparams_;
    private TClosep _paramclose_;
    private TOpenp _funcopen_;
    private PStatements _statements_;
    private TClosep _funcclose_;

    public ADefineFunction ()
    {
    }

    public ADefineFunction (
            TKeyfunc _keyfunc_,
            TId _id_,
            TOpenp _paramopen_,
            PFuncparams _funcparams_,
            TClosep _paramclose_,
            TOpenp _funcopen_,
            PStatements _statements_,
            TClosep _funcclose_
    )
    {
        SetKeyfunc (_keyfunc_);
        SetId (_id_);
        SetParamopen (_paramopen_);
        SetFuncparams (_funcparams_);
        SetParamclose (_paramclose_);
        SetFuncopen (_funcopen_);
        SetStatements (_statements_);
        SetFuncclose (_funcclose_);
    }

    public override Object Clone()
    {
        return new ADefineFunction (
            (TKeyfunc)CloneNode (_keyfunc_),
            (TId)CloneNode (_id_),
            (TOpenp)CloneNode (_paramopen_),
            (PFuncparams)CloneNode (_funcparams_),
            (TClosep)CloneNode (_paramclose_),
            (TOpenp)CloneNode (_funcopen_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_funcclose_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADefineFunction(this);
    }

    public TKeyfunc GetKeyfunc ()
    {
        return _keyfunc_;
    }

    public void SetKeyfunc (TKeyfunc node)
    {
        if(_keyfunc_ != null)
        {
            _keyfunc_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyfunc_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenp GetParamopen ()
    {
        return _paramopen_;
    }

    public void SetParamopen (TOpenp node)
    {
        if(_paramopen_ != null)
        {
            _paramopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _paramopen_ = node;
    }
    public PFuncparams GetFuncparams ()
    {
        return _funcparams_;
    }

    public void SetFuncparams (PFuncparams node)
    {
        if(_funcparams_ != null)
        {
            _funcparams_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcparams_ = node;
    }
    public TClosep GetParamclose ()
    {
        return _paramclose_;
    }

    public void SetParamclose (TClosep node)
    {
        if(_paramclose_ != null)
        {
            _paramclose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _paramclose_ = node;
    }
    public TOpenp GetFuncopen ()
    {
        return _funcopen_;
    }

    public void SetFuncopen (TOpenp node)
    {
        if(_funcopen_ != null)
        {
            _funcopen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcopen_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetFuncclose ()
    {
        return _funcclose_;
    }

    public void SetFuncclose (TClosep node)
    {
        if(_funcclose_ != null)
        {
            _funcclose_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcclose_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyfunc_)
            + ToString (_id_)
            + ToString (_paramopen_)
            + ToString (_funcparams_)
            + ToString (_paramclose_)
            + ToString (_funcopen_)
            + ToString (_statements_)
            + ToString (_funcclose_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyfunc_ == child )
        {
            _keyfunc_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _paramopen_ == child )
        {
            _paramopen_ = null;
            return;
        }
        if ( _funcparams_ == child )
        {
            _funcparams_ = null;
            return;
        }
        if ( _paramclose_ == child )
        {
            _paramclose_ = null;
            return;
        }
        if ( _funcopen_ == child )
        {
            _funcopen_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _funcclose_ == child )
        {
            _funcclose_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyfunc_ == oldChild )
        {
            SetKeyfunc ((TKeyfunc) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _paramopen_ == oldChild )
        {
            SetParamopen ((TOpenp) newChild);
            return;
        }
        if ( _funcparams_ == oldChild )
        {
            SetFuncparams ((PFuncparams) newChild);
            return;
        }
        if ( _paramclose_ == oldChild )
        {
            SetParamclose ((TClosep) newChild);
            return;
        }
        if ( _funcopen_ == oldChild )
        {
            SetFuncopen ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _funcclose_ == oldChild )
        {
            SetFuncclose ((TClosep) newChild);
            return;
        }
    }

}
public sealed class ASingleintFuncparams : PFuncparams
{
    private TKeyint _keyint_;
    private TId _id_;

    public ASingleintFuncparams ()
    {
    }

    public ASingleintFuncparams (
            TKeyint _keyint_,
            TId _id_
    )
    {
        SetKeyint (_keyint_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ASingleintFuncparams (
            (TKeyint)CloneNode (_keyint_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleintFuncparams(this);
    }

    public TKeyint GetKeyint ()
    {
        return _keyint_;
    }

    public void SetKeyint (TKeyint node)
    {
        if(_keyint_ != null)
        {
            _keyint_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyint_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyint_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyint_ == child )
        {
            _keyint_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyint_ == oldChild )
        {
            SetKeyint ((TKeyint) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ASinglefloatFuncparams : PFuncparams
{
    private TKeyfloat _keyfloat_;
    private TId _id_;

    public ASinglefloatFuncparams ()
    {
    }

    public ASinglefloatFuncparams (
            TKeyfloat _keyfloat_,
            TId _id_
    )
    {
        SetKeyfloat (_keyfloat_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ASinglefloatFuncparams (
            (TKeyfloat)CloneNode (_keyfloat_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASinglefloatFuncparams(this);
    }

    public TKeyfloat GetKeyfloat ()
    {
        return _keyfloat_;
    }

    public void SetKeyfloat (TKeyfloat node)
    {
        if(_keyfloat_ != null)
        {
            _keyfloat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyfloat_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyfloat_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyfloat_ == child )
        {
            _keyfloat_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyfloat_ == oldChild )
        {
            SetKeyfloat ((TKeyfloat) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ASinglestrFuncparams : PFuncparams
{
    private TKeystr _keystr_;
    private TId _id_;

    public ASinglestrFuncparams ()
    {
    }

    public ASinglestrFuncparams (
            TKeystr _keystr_,
            TId _id_
    )
    {
        SetKeystr (_keystr_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ASinglestrFuncparams (
            (TKeystr)CloneNode (_keystr_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASinglestrFuncparams(this);
    }

    public TKeystr GetKeystr ()
    {
        return _keystr_;
    }

    public void SetKeystr (TKeystr node)
    {
        if(_keystr_ != null)
        {
            _keystr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keystr_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keystr_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keystr_ == child )
        {
            _keystr_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keystr_ == oldChild )
        {
            SetKeystr ((TKeystr) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AMultintFuncparams : PFuncparams
{
    private TKeyint _keyint_;
    private TId _id_;
    private TComma _comma_;
    private PFuncparams _funcparams_;

    public AMultintFuncparams ()
    {
    }

    public AMultintFuncparams (
            TKeyint _keyint_,
            TId _id_,
            TComma _comma_,
            PFuncparams _funcparams_
    )
    {
        SetKeyint (_keyint_);
        SetId (_id_);
        SetComma (_comma_);
        SetFuncparams (_funcparams_);
    }

    public override Object Clone()
    {
        return new AMultintFuncparams (
            (TKeyint)CloneNode (_keyint_),
            (TId)CloneNode (_id_),
            (TComma)CloneNode (_comma_),
            (PFuncparams)CloneNode (_funcparams_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultintFuncparams(this);
    }

    public TKeyint GetKeyint ()
    {
        return _keyint_;
    }

    public void SetKeyint (TKeyint node)
    {
        if(_keyint_ != null)
        {
            _keyint_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyint_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFuncparams GetFuncparams ()
    {
        return _funcparams_;
    }

    public void SetFuncparams (PFuncparams node)
    {
        if(_funcparams_ != null)
        {
            _funcparams_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcparams_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyint_)
            + ToString (_id_)
            + ToString (_comma_)
            + ToString (_funcparams_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyint_ == child )
        {
            _keyint_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _funcparams_ == child )
        {
            _funcparams_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyint_ == oldChild )
        {
            SetKeyint ((TKeyint) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _funcparams_ == oldChild )
        {
            SetFuncparams ((PFuncparams) newChild);
            return;
        }
    }

}
public sealed class AMultifloatFuncparams : PFuncparams
{
    private TKeyfloat _keyfloat_;
    private TId _id_;
    private TComma _comma_;
    private PFuncparams _funcparams_;

    public AMultifloatFuncparams ()
    {
    }

    public AMultifloatFuncparams (
            TKeyfloat _keyfloat_,
            TId _id_,
            TComma _comma_,
            PFuncparams _funcparams_
    )
    {
        SetKeyfloat (_keyfloat_);
        SetId (_id_);
        SetComma (_comma_);
        SetFuncparams (_funcparams_);
    }

    public override Object Clone()
    {
        return new AMultifloatFuncparams (
            (TKeyfloat)CloneNode (_keyfloat_),
            (TId)CloneNode (_id_),
            (TComma)CloneNode (_comma_),
            (PFuncparams)CloneNode (_funcparams_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultifloatFuncparams(this);
    }

    public TKeyfloat GetKeyfloat ()
    {
        return _keyfloat_;
    }

    public void SetKeyfloat (TKeyfloat node)
    {
        if(_keyfloat_ != null)
        {
            _keyfloat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyfloat_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFuncparams GetFuncparams ()
    {
        return _funcparams_;
    }

    public void SetFuncparams (PFuncparams node)
    {
        if(_funcparams_ != null)
        {
            _funcparams_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcparams_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyfloat_)
            + ToString (_id_)
            + ToString (_comma_)
            + ToString (_funcparams_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyfloat_ == child )
        {
            _keyfloat_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _funcparams_ == child )
        {
            _funcparams_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyfloat_ == oldChild )
        {
            SetKeyfloat ((TKeyfloat) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _funcparams_ == oldChild )
        {
            SetFuncparams ((PFuncparams) newChild);
            return;
        }
    }

}
public sealed class AMultistrFuncparams : PFuncparams
{
    private TKeystr _keystr_;
    private TId _id_;
    private TComma _comma_;
    private PFuncparams _funcparams_;

    public AMultistrFuncparams ()
    {
    }

    public AMultistrFuncparams (
            TKeystr _keystr_,
            TId _id_,
            TComma _comma_,
            PFuncparams _funcparams_
    )
    {
        SetKeystr (_keystr_);
        SetId (_id_);
        SetComma (_comma_);
        SetFuncparams (_funcparams_);
    }

    public override Object Clone()
    {
        return new AMultistrFuncparams (
            (TKeystr)CloneNode (_keystr_),
            (TId)CloneNode (_id_),
            (TComma)CloneNode (_comma_),
            (PFuncparams)CloneNode (_funcparams_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultistrFuncparams(this);
    }

    public TKeystr GetKeystr ()
    {
        return _keystr_;
    }

    public void SetKeystr (TKeystr node)
    {
        if(_keystr_ != null)
        {
            _keystr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keystr_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFuncparams GetFuncparams ()
    {
        return _funcparams_;
    }

    public void SetFuncparams (PFuncparams node)
    {
        if(_funcparams_ != null)
        {
            _funcparams_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcparams_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keystr_)
            + ToString (_id_)
            + ToString (_comma_)
            + ToString (_funcparams_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keystr_ == child )
        {
            _keystr_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _funcparams_ == child )
        {
            _funcparams_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keystr_ == oldChild )
        {
            SetKeystr ((TKeystr) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _funcparams_ == oldChild )
        {
            SetFuncparams ((PFuncparams) newChild);
            return;
        }
    }

}
public sealed class AEmptyFuncparams : PFuncparams
{


    public AEmptyFuncparams (
    )
    {
    }

    public override Object Clone()
    {
        return new AEmptyFuncparams (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyFuncparams(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIfStatement : PIfStatement
{
    private TKeyif _keyif_;
    private TOpenp _headero_;
    private PConditional _conditional_;
    private TClosep _headerc_;
    private TOpenp _bodyo_;
    private PStatements _statements_;
    private TClosep _bodyc_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            TKeyif _keyif_,
            TOpenp _headero_,
            PConditional _conditional_,
            TClosep _headerc_,
            TOpenp _bodyo_,
            PStatements _statements_,
            TClosep _bodyc_
    )
    {
        SetKeyif (_keyif_);
        SetHeadero (_headero_);
        SetConditional (_conditional_);
        SetHeaderc (_headerc_);
        SetBodyo (_bodyo_);
        SetStatements (_statements_);
        SetBodyc (_bodyc_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (TKeyif)CloneNode (_keyif_),
            (TOpenp)CloneNode (_headero_),
            (PConditional)CloneNode (_conditional_),
            (TClosep)CloneNode (_headerc_),
            (TOpenp)CloneNode (_bodyo_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_bodyc_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public TKeyif GetKeyif ()
    {
        return _keyif_;
    }

    public void SetKeyif (TKeyif node)
    {
        if(_keyif_ != null)
        {
            _keyif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyif_ = node;
    }
    public TOpenp GetHeadero ()
    {
        return _headero_;
    }

    public void SetHeadero (TOpenp node)
    {
        if(_headero_ != null)
        {
            _headero_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _headero_ = node;
    }
    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }
    public TClosep GetHeaderc ()
    {
        return _headerc_;
    }

    public void SetHeaderc (TClosep node)
    {
        if(_headerc_ != null)
        {
            _headerc_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _headerc_ = node;
    }
    public TOpenp GetBodyo ()
    {
        return _bodyo_;
    }

    public void SetBodyo (TOpenp node)
    {
        if(_bodyo_ != null)
        {
            _bodyo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bodyo_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetBodyc ()
    {
        return _bodyc_;
    }

    public void SetBodyc (TClosep node)
    {
        if(_bodyc_ != null)
        {
            _bodyc_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bodyc_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyif_)
            + ToString (_headero_)
            + ToString (_conditional_)
            + ToString (_headerc_)
            + ToString (_bodyo_)
            + ToString (_statements_)
            + ToString (_bodyc_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyif_ == child )
        {
            _keyif_ = null;
            return;
        }
        if ( _headero_ == child )
        {
            _headero_ = null;
            return;
        }
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
        if ( _headerc_ == child )
        {
            _headerc_ = null;
            return;
        }
        if ( _bodyo_ == child )
        {
            _bodyo_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _bodyc_ == child )
        {
            _bodyc_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyif_ == oldChild )
        {
            SetKeyif ((TKeyif) newChild);
            return;
        }
        if ( _headero_ == oldChild )
        {
            SetHeadero ((TOpenp) newChild);
            return;
        }
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
        if ( _headerc_ == oldChild )
        {
            SetHeaderc ((TClosep) newChild);
            return;
        }
        if ( _bodyo_ == oldChild )
        {
            SetBodyo ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _bodyc_ == oldChild )
        {
            SetBodyc ((TClosep) newChild);
            return;
        }
    }

}
public sealed class ASingleConditional : PConditional
{
    private PNegation _negation_;
    private PComparison _comparison_;

    public ASingleConditional ()
    {
    }

    public ASingleConditional (
            PNegation _negation_,
            PComparison _comparison_
    )
    {
        SetNegation (_negation_);
        SetComparison (_comparison_);
    }

    public override Object Clone()
    {
        return new ASingleConditional (
            (PNegation)CloneNode (_negation_),
            (PComparison)CloneNode (_comparison_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleConditional(this);
    }

    public PNegation GetNegation ()
    {
        return _negation_;
    }

    public void SetNegation (PNegation node)
    {
        if(_negation_ != null)
        {
            _negation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _negation_ = node;
    }
    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_negation_)
            + ToString (_comparison_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _negation_ == child )
        {
            _negation_ = null;
            return;
        }
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _negation_ == oldChild )
        {
            SetNegation ((PNegation) newChild);
            return;
        }
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
    }

}
public sealed class AMultipleandConditional : PConditional
{
    private PNegation _negation_;
    private PComparison _comparison_;
    private PConjunction _conjunction_;
    private PConditional _conditional_;

    public AMultipleandConditional ()
    {
    }

    public AMultipleandConditional (
            PNegation _negation_,
            PComparison _comparison_,
            PConjunction _conjunction_,
            PConditional _conditional_
    )
    {
        SetNegation (_negation_);
        SetComparison (_comparison_);
        SetConjunction (_conjunction_);
        SetConditional (_conditional_);
    }

    public override Object Clone()
    {
        return new AMultipleandConditional (
            (PNegation)CloneNode (_negation_),
            (PComparison)CloneNode (_comparison_),
            (PConjunction)CloneNode (_conjunction_),
            (PConditional)CloneNode (_conditional_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleandConditional(this);
    }

    public PNegation GetNegation ()
    {
        return _negation_;
    }

    public void SetNegation (PNegation node)
    {
        if(_negation_ != null)
        {
            _negation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _negation_ = node;
    }
    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }
    public PConjunction GetConjunction ()
    {
        return _conjunction_;
    }

    public void SetConjunction (PConjunction node)
    {
        if(_conjunction_ != null)
        {
            _conjunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conjunction_ = node;
    }
    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_negation_)
            + ToString (_comparison_)
            + ToString (_conjunction_)
            + ToString (_conditional_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _negation_ == child )
        {
            _negation_ = null;
            return;
        }
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
        if ( _conjunction_ == child )
        {
            _conjunction_ = null;
            return;
        }
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _negation_ == oldChild )
        {
            SetNegation ((PNegation) newChild);
            return;
        }
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
        if ( _conjunction_ == oldChild )
        {
            SetConjunction ((PConjunction) newChild);
            return;
        }
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
    }

}
public sealed class ANegateNegation : PNegation
{
    private TNotl _notl_;

    public ANegateNegation ()
    {
    }

    public ANegateNegation (
            TNotl _notl_
    )
    {
        SetNotl (_notl_);
    }

    public override Object Clone()
    {
        return new ANegateNegation (
            (TNotl)CloneNode (_notl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegateNegation(this);
    }

    public TNotl GetNotl ()
    {
        return _notl_;
    }

    public void SetNotl (TNotl node)
    {
        if(_notl_ != null)
        {
            _notl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _notl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_notl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _notl_ == child )
        {
            _notl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _notl_ == oldChild )
        {
            SetNotl ((TNotl) newChild);
            return;
        }
    }

}
public sealed class ADontnegateNegation : PNegation
{


    public ADontnegateNegation (
    )
    {
    }

    public override Object Clone()
    {
        return new ADontnegateNegation (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADontnegateNegation(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AVarBoolean : PBoolean
{
    private TId _id_;

    public AVarBoolean ()
    {
    }

    public AVarBoolean (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVarBoolean (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarBoolean(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AIntBoolean : PBoolean
{
    private TInteger _integer_;

    public AIntBoolean ()
    {
    }

    public AIntBoolean (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntBoolean (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntBoolean(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AAndConjunction : PConjunction
{
    private TAndl _andl_;

    public AAndConjunction ()
    {
    }

    public AAndConjunction (
            TAndl _andl_
    )
    {
        SetAndl (_andl_);
    }

    public override Object Clone()
    {
        return new AAndConjunction (
            (TAndl)CloneNode (_andl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndConjunction(this);
    }

    public TAndl GetAndl ()
    {
        return _andl_;
    }

    public void SetAndl (TAndl node)
    {
        if(_andl_ != null)
        {
            _andl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_andl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _andl_ == child )
        {
            _andl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _andl_ == oldChild )
        {
            SetAndl ((TAndl) newChild);
            return;
        }
    }

}
public sealed class APassConjunction : PConjunction
{
    private PConjunction2 _conjunction2_;

    public APassConjunction ()
    {
    }

    public APassConjunction (
            PConjunction2 _conjunction2_
    )
    {
        SetConjunction2 (_conjunction2_);
    }

    public override Object Clone()
    {
        return new APassConjunction (
            (PConjunction2)CloneNode (_conjunction2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassConjunction(this);
    }

    public PConjunction2 GetConjunction2 ()
    {
        return _conjunction2_;
    }

    public void SetConjunction2 (PConjunction2 node)
    {
        if(_conjunction2_ != null)
        {
            _conjunction2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conjunction2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_conjunction2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _conjunction2_ == child )
        {
            _conjunction2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _conjunction2_ == oldChild )
        {
            SetConjunction2 ((PConjunction2) newChild);
            return;
        }
    }

}
public sealed class AConjunction2 : PConjunction2
{
    private TOrl _orl_;

    public AConjunction2 ()
    {
    }

    public AConjunction2 (
            TOrl _orl_
    )
    {
        SetOrl (_orl_);
    }

    public override Object Clone()
    {
        return new AConjunction2 (
            (TOrl)CloneNode (_orl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConjunction2(this);
    }

    public TOrl GetOrl ()
    {
        return _orl_;
    }

    public void SetOrl (TOrl node)
    {
        if(_orl_ != null)
        {
            _orl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_orl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _orl_ == child )
        {
            _orl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _orl_ == oldChild )
        {
            SetOrl ((TOrl) newChild);
            return;
        }
    }

}
public sealed class ACompareComparison : PComparison
{
    private PExpression _leftside_;
    private POperation _operation_;
    private PExpression _rightside_;

    public ACompareComparison ()
    {
    }

    public ACompareComparison (
            PExpression _leftside_,
            POperation _operation_,
            PExpression _rightside_
    )
    {
        SetLeftside (_leftside_);
        SetOperation (_operation_);
        SetRightside (_rightside_);
    }

    public override Object Clone()
    {
        return new ACompareComparison (
            (PExpression)CloneNode (_leftside_),
            (POperation)CloneNode (_operation_),
            (PExpression)CloneNode (_rightside_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompareComparison(this);
    }

    public PExpression GetLeftside ()
    {
        return _leftside_;
    }

    public void SetLeftside (PExpression node)
    {
        if(_leftside_ != null)
        {
            _leftside_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftside_ = node;
    }
    public POperation GetOperation ()
    {
        return _operation_;
    }

    public void SetOperation (POperation node)
    {
        if(_operation_ != null)
        {
            _operation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operation_ = node;
    }
    public PExpression GetRightside ()
    {
        return _rightside_;
    }

    public void SetRightside (PExpression node)
    {
        if(_rightside_ != null)
        {
            _rightside_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightside_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_leftside_)
            + ToString (_operation_)
            + ToString (_rightside_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _leftside_ == child )
        {
            _leftside_ = null;
            return;
        }
        if ( _operation_ == child )
        {
            _operation_ = null;
            return;
        }
        if ( _rightside_ == child )
        {
            _rightside_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _leftside_ == oldChild )
        {
            SetLeftside ((PExpression) newChild);
            return;
        }
        if ( _operation_ == oldChild )
        {
            SetOperation ((POperation) newChild);
            return;
        }
        if ( _rightside_ == oldChild )
        {
            SetRightside ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ABooleanintComparison : PComparison
{
    private TInteger _integer_;

    public ABooleanintComparison ()
    {
    }

    public ABooleanintComparison (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new ABooleanintComparison (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanintComparison(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class ABooleanvarComparison : PComparison
{
    private TId _id_;

    public ABooleanvarComparison ()
    {
    }

    public ABooleanvarComparison (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ABooleanvarComparison (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooleanvarComparison(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AGreqOperation : POperation
{
    private TGreatereq _greatereq_;

    public AGreqOperation ()
    {
    }

    public AGreqOperation (
            TGreatereq _greatereq_
    )
    {
        SetGreatereq (_greatereq_);
    }

    public override Object Clone()
    {
        return new AGreqOperation (
            (TGreatereq)CloneNode (_greatereq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreqOperation(this);
    }

    public TGreatereq GetGreatereq ()
    {
        return _greatereq_;
    }

    public void SetGreatereq (TGreatereq node)
    {
        if(_greatereq_ != null)
        {
            _greatereq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greatereq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greatereq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greatereq_ == child )
        {
            _greatereq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greatereq_ == oldChild )
        {
            SetGreatereq ((TGreatereq) newChild);
            return;
        }
    }

}
public sealed class AGreaterOperation : POperation
{
    private TGreater _greater_;

    public AGreaterOperation ()
    {
    }

    public AGreaterOperation (
            TGreater _greater_
    )
    {
        SetGreater (_greater_);
    }

    public override Object Clone()
    {
        return new AGreaterOperation (
            (TGreater)CloneNode (_greater_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterOperation(this);
    }

    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
    }

}
public sealed class ALeqOperation : POperation
{
    private TLesseq _lesseq_;

    public ALeqOperation ()
    {
    }

    public ALeqOperation (
            TLesseq _lesseq_
    )
    {
        SetLesseq (_lesseq_);
    }

    public override Object Clone()
    {
        return new ALeqOperation (
            (TLesseq)CloneNode (_lesseq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeqOperation(this);
    }

    public TLesseq GetLesseq ()
    {
        return _lesseq_;
    }

    public void SetLesseq (TLesseq node)
    {
        if(_lesseq_ != null)
        {
            _lesseq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lesseq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lesseq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lesseq_ == child )
        {
            _lesseq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lesseq_ == oldChild )
        {
            SetLesseq ((TLesseq) newChild);
            return;
        }
    }

}
public sealed class ALessOperation : POperation
{
    private TLess _less_;

    public ALessOperation ()
    {
    }

    public ALessOperation (
            TLess _less_
    )
    {
        SetLess (_less_);
    }

    public override Object Clone()
    {
        return new ALessOperation (
            (TLess)CloneNode (_less_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessOperation(this);
    }

    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
    }

}
public sealed class AEquivalenceOperation : POperation
{
    private TEquiv _equiv_;

    public AEquivalenceOperation ()
    {
    }

    public AEquivalenceOperation (
            TEquiv _equiv_
    )
    {
        SetEquiv (_equiv_);
    }

    public override Object Clone()
    {
        return new AEquivalenceOperation (
            (TEquiv)CloneNode (_equiv_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEquivalenceOperation(this);
    }

    public TEquiv GetEquiv ()
    {
        return _equiv_;
    }

    public void SetEquiv (TEquiv node)
    {
        if(_equiv_ != null)
        {
            _equiv_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equiv_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equiv_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equiv_ == child )
        {
            _equiv_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equiv_ == oldChild )
        {
            SetEquiv ((TEquiv) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PWhileStatement
{
    private TKeywhile _keywhile_;
    private TOpenp _headero_;
    private PConditional _conditional_;
    private TClosep _headerc_;
    private TOpenp _bodyo_;
    private PStatements _statements_;
    private TClosep _bodyc_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            TKeywhile _keywhile_,
            TOpenp _headero_,
            PConditional _conditional_,
            TClosep _headerc_,
            TOpenp _bodyo_,
            PStatements _statements_,
            TClosep _bodyc_
    )
    {
        SetKeywhile (_keywhile_);
        SetHeadero (_headero_);
        SetConditional (_conditional_);
        SetHeaderc (_headerc_);
        SetBodyo (_bodyo_);
        SetStatements (_statements_);
        SetBodyc (_bodyc_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (TKeywhile)CloneNode (_keywhile_),
            (TOpenp)CloneNode (_headero_),
            (PConditional)CloneNode (_conditional_),
            (TClosep)CloneNode (_headerc_),
            (TOpenp)CloneNode (_bodyo_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_bodyc_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public TKeywhile GetKeywhile ()
    {
        return _keywhile_;
    }

    public void SetKeywhile (TKeywhile node)
    {
        if(_keywhile_ != null)
        {
            _keywhile_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keywhile_ = node;
    }
    public TOpenp GetHeadero ()
    {
        return _headero_;
    }

    public void SetHeadero (TOpenp node)
    {
        if(_headero_ != null)
        {
            _headero_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _headero_ = node;
    }
    public PConditional GetConditional ()
    {
        return _conditional_;
    }

    public void SetConditional (PConditional node)
    {
        if(_conditional_ != null)
        {
            _conditional_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_ = node;
    }
    public TClosep GetHeaderc ()
    {
        return _headerc_;
    }

    public void SetHeaderc (TClosep node)
    {
        if(_headerc_ != null)
        {
            _headerc_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _headerc_ = node;
    }
    public TOpenp GetBodyo ()
    {
        return _bodyo_;
    }

    public void SetBodyo (TOpenp node)
    {
        if(_bodyo_ != null)
        {
            _bodyo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bodyo_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetBodyc ()
    {
        return _bodyc_;
    }

    public void SetBodyc (TClosep node)
    {
        if(_bodyc_ != null)
        {
            _bodyc_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bodyc_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keywhile_)
            + ToString (_headero_)
            + ToString (_conditional_)
            + ToString (_headerc_)
            + ToString (_bodyo_)
            + ToString (_statements_)
            + ToString (_bodyc_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keywhile_ == child )
        {
            _keywhile_ = null;
            return;
        }
        if ( _headero_ == child )
        {
            _headero_ = null;
            return;
        }
        if ( _conditional_ == child )
        {
            _conditional_ = null;
            return;
        }
        if ( _headerc_ == child )
        {
            _headerc_ = null;
            return;
        }
        if ( _bodyo_ == child )
        {
            _bodyo_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _bodyc_ == child )
        {
            _bodyc_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keywhile_ == oldChild )
        {
            SetKeywhile ((TKeywhile) newChild);
            return;
        }
        if ( _headero_ == oldChild )
        {
            SetHeadero ((TOpenp) newChild);
            return;
        }
        if ( _conditional_ == oldChild )
        {
            SetConditional ((PConditional) newChild);
            return;
        }
        if ( _headerc_ == oldChild )
        {
            SetHeaderc ((TClosep) newChild);
            return;
        }
        if ( _bodyo_ == oldChild )
        {
            SetBodyo ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _bodyc_ == oldChild )
        {
            SetBodyc ((TClosep) newChild);
            return;
        }
    }

}
public sealed class AMainBlock : PMainBlock
{
    private TKeymain _keymain_;
    private TOpenp _openp_;
    private PStatements _statements_;
    private TClosep _closep_;

    public AMainBlock ()
    {
    }

    public AMainBlock (
            TKeymain _keymain_,
            TOpenp _openp_,
            PStatements _statements_,
            TClosep _closep_
    )
    {
        SetKeymain (_keymain_);
        SetOpenp (_openp_);
        SetStatements (_statements_);
        SetClosep (_closep_);
    }

    public override Object Clone()
    {
        return new AMainBlock (
            (TKeymain)CloneNode (_keymain_),
            (TOpenp)CloneNode (_openp_),
            (PStatements)CloneNode (_statements_),
            (TClosep)CloneNode (_closep_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainBlock(this);
    }

    public TKeymain GetKeymain ()
    {
        return _keymain_;
    }

    public void SetKeymain (TKeymain node)
    {
        if(_keymain_ != null)
        {
            _keymain_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keymain_ = node;
    }
    public TOpenp GetOpenp ()
    {
        return _openp_;
    }

    public void SetOpenp (TOpenp node)
    {
        if(_openp_ != null)
        {
            _openp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _openp_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TClosep GetClosep ()
    {
        return _closep_;
    }

    public void SetClosep (TClosep node)
    {
        if(_closep_ != null)
        {
            _closep_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _closep_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keymain_)
            + ToString (_openp_)
            + ToString (_statements_)
            + ToString (_closep_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keymain_ == child )
        {
            _keymain_ = null;
            return;
        }
        if ( _openp_ == child )
        {
            _openp_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _closep_ == child )
        {
            _closep_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keymain_ == oldChild )
        {
            SetKeymain ((TKeymain) newChild);
            return;
        }
        if ( _openp_ == oldChild )
        {
            SetOpenp ((TOpenp) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _closep_ == oldChild )
        {
            SetClosep ((TClosep) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
